{"version":3,"file":"formik.esm.js","sources":["../src/utils.ts","../src/Formik.tsx","../src/FieldArray.tsx","../src/ErrorMessage.tsx"],"sourcesContent":["import clone from 'lodash/clone';\nimport toPath from 'lodash/toPath';\nimport * as React from 'react';\n\n// Assertions\n\n/** @private is the given object a Function? */\nexport const isFunction = (obj: any): obj is Function =>\n  typeof obj === 'function';\n\n/** @private is the given object an Object? */\nexport const isObject = (obj: any): boolean =>\n  obj !== null && typeof obj === 'object';\n\n/** @private is the given object an integer? */\nexport const isInteger = (obj: any): boolean =>\n  String(Math.floor(Number(obj))) === obj;\n\n/** @private is the given object a string? */\nexport const isString = (obj: any): obj is string =>\n  Object.prototype.toString.call(obj) === '[object String]';\n\n/** @private is the given object a NaN? */\nexport const isNaN = (obj: any): boolean => obj !== obj;\n\n/** @private Does a React component have exactly 0 children? */\nexport const isEmptyChildren = (children: any): boolean =>\n  React.Children.count(children) === 0;\n\n/** @private is the given object/value a promise? */\nexport const isPromise = (value: any): value is PromiseLike<any> =>\n  isObject(value) && isFunction(value.then);\n\n/** @private is the given object/value a type of synthetic event? */\nexport const isInputEvent = (value: any): value is React.SyntheticEvent<any> =>\n  value && isObject(value) && isObject(value.target);\n\n/**\n * Same as document.activeElement but wraps in a try-catch block. In IE it is\n * not safe to call document.activeElement if there is nothing focused.\n *\n * The activeElement will be null only if the document or document body is not\n * yet defined.\n *\n * @param {?Document} doc Defaults to current document.\n * @return {Element | null}\n * @see https://github.com/facebook/fbjs/blob/master/packages/fbjs/src/core/dom/getActiveElement.js\n */\nexport function getActiveElement(doc?: Document): Element | null {\n  doc = doc || (typeof document !== 'undefined' ? document : undefined);\n  if (typeof doc === 'undefined') {\n    return null;\n  }\n  try {\n    return doc.activeElement || doc.body;\n  } catch (e) {\n    return doc.body;\n  }\n}\n\n/**\n * Make a promise cancellable by @istarkov\n * @see https://reactjs.org/blog/2015/12/16/ismounted-antipattern.html\n */\nexport function makeCancelable<T extends Promise<any>>(\n  promise: T\n): [T, () => void] {\n  let hasCanceled: boolean = false;\n\n  const wrappedPromise: any = new Promise((resolve, reject) => {\n    promise.then(\n      val => (hasCanceled ? reject({ isCanceled: true }) : resolve(val)),\n      error => (hasCanceled ? reject({ isCanceled: true }) : reject(error))\n    );\n  });\n\n  return [\n    wrappedPromise,\n    function cancel() {\n      hasCanceled = true;\n    },\n  ];\n}\n\n/**\n * Deeply get a value from an object via its path.\n */\nexport function getIn(\n  obj: any,\n  key: string | string[],\n  def?: any,\n  p: number = 0\n) {\n  const path = toPath(key);\n  while (obj && p < path.length) {\n    obj = obj[path[p++]];\n  }\n  return obj === undefined ? def : obj;\n}\n\n/**\n * Deeply set a value from in object via it's path. If the value at `path`\n * has changed, return a shallow copy of obj with `value` set at `path`.\n * If `value` has not changed, return the original `obj`.\n *\n * Existing objects / arrays along `path` are also shallow copied. Sibling\n * objects along path retain the same internal js reference. Since new\n * objects / arrays are only created along `path`, we can test if anything\n * changed in a nested structure by comparing the object's reference in\n * the old and new object, similar to how russian doll cache invalidation\n * works.\n *\n * In earlier versions of this function, which used cloneDeep, there were\n * issues whereby settings a nested value would mutate the parent\n * instead of creating a new object. `clone` avoids that bug making a\n * shallow copy of the objects along the update path\n * so no object is mutated in place.\n *\n * Before changing this function, please read through the following\n * discussions.\n *\n * @see https://github.com/developit/linkstate\n * @see https://github.com/jaredpalmer/formik/pull/123\n */\nexport function setIn(obj: any, path: string, value: any): any {\n  let res: any = clone(obj); // this keeps inheritance when obj is a class\n  let resVal: any = res;\n  let i = 0;\n  let pathArray = toPath(path);\n\n  for (; i < pathArray.length - 1; i++) {\n    const currentPath: string = pathArray[i];\n    let currentObj: any = getIn(obj, pathArray.slice(0, i + 1));\n\n    if (currentObj) {\n      resVal = resVal[currentPath] = clone(currentObj);\n    } else {\n      const nextPath: string = pathArray[i + 1];\n      resVal = resVal[currentPath] =\n        isInteger(nextPath) && Number(nextPath) >= 0 ? [] : {};\n    }\n  }\n\n  // Return original object if new value is the same as current\n  if ((i === 0 ? obj : resVal)[pathArray[i]] === value) {\n    return obj;\n  }\n\n  if (value === undefined) {\n    delete resVal[pathArray[i]];\n  } else {\n    resVal[pathArray[i]] = value;\n  }\n\n  // If the path array has a single element, the loop did not run.\n  // Deleting on `resVal` had no effect in this scenario, so we delete on the result instead.\n  if (i === 0 && value === undefined) {\n    delete res[pathArray[i]];\n  }\n\n  return res;\n}\n\n/**\n * Recursively a set the same value for all keys and arrays nested object, cloning\n * @param object\n * @param value\n * @param visited\n * @param response\n */\nexport function setNestedObjectValues<T>(\n  object: any,\n  value: any,\n  visited: any = new WeakMap(),\n  response: any = {}\n): T {\n  for (let k of Object.keys(object)) {\n    const val = object[k];\n    if (isObject(val)) {\n      if (!visited.get(val)) {\n        visited.set(val, true);\n        // In order to keep array values consistent for both dot path  and\n        // bracket syntax, we need to check if this is an array so that\n        // this will output  { friends: [true] } and not { friends: { \"0\": true } }\n        response[k] = Array.isArray(val) ? [] : {};\n        setNestedObjectValues(val, value, visited, response[k]);\n      }\n    } else {\n      response[k] = value;\n    }\n  }\n\n  return response;\n}\n","import * as React from 'react';\r\nimport isEqual from 'react-fast-compare';\r\nimport deepmerge from 'deepmerge';\r\nimport { FormikProvider } from './connect';\r\nimport warning from 'tiny-warning';\r\nimport {\r\n  FormikActions,\r\n  FormikConfig,\r\n  FormikErrors,\r\n  FormikState,\r\n  FormikTouched,\r\n  FormikValues,\r\n  FormikProps,\r\n} from './types';\r\nimport {\r\n  isEmptyChildren,\r\n  isFunction,\r\n  isNaN,\r\n  isPromise,\r\n  isString,\r\n  isInputEvent,\r\n  setIn,\r\n  setNestedObjectValues,\r\n  getActiveElement,\r\n  getIn,\r\n  makeCancelable,\r\n} from './utils';\r\n\r\nexport class Formik<Values = FormikValues> extends React.Component<\r\n  FormikConfig<Values>,\r\n  FormikState<Values>\r\n> {\r\n  static defaultProps = {\r\n    validateOnChange: true,\r\n    validateOnBlur: true,\r\n    isInitialValid: false,\r\n    enableReinitialize: false,\r\n  };\r\n\r\n  initialValues: Values;\r\n  didMount: boolean;\r\n  hcCache: {\r\n    [key: string]: (e: unknown | React.ChangeEvent<any>) => void;\r\n  } = {};\r\n  hbCache: {\r\n    [key: string]: (e: any) => void;\r\n  } = {};\r\n  fields: {\r\n    [field: string]: React.Component<any>;\r\n  };\r\n  validator: any;\r\n\r\n  constructor(props: FormikConfig<Values>) {\r\n    super(props);\r\n    this.state = {\r\n      values: props.initialValues || ({} as any),\r\n      errors: {},\r\n      touched: {},\r\n      isSubmitting: false,\r\n      isValidating: false,\r\n      submitCount: 0,\r\n      status: props.initialStatus,\r\n    };\r\n    this.didMount = false;\r\n    this.fields = {};\r\n    this.initialValues = props.initialValues || ({} as any);\r\n    warning(\r\n      !(props.component && props.render),\r\n      'You should not use <Formik component> and <Formik render> in the same <Formik> component; <Formik render> will be ignored'\r\n    );\r\n\r\n    warning(\r\n      !(props.component && props.children && !isEmptyChildren(props.children)),\r\n      'You should not use <Formik component> and <Formik children> in the same <Formik> component; <Formik children> will be ignored'\r\n    );\r\n\r\n    warning(\r\n      !(props.render && props.children && !isEmptyChildren(props.children)),\r\n      'You should not use <Formik render> and <Formik children> in the same <Formik> component; <Formik children> will be ignored'\r\n    );\r\n  }\r\n\r\n  registerField = (name: string, Comp: React.Component<any>) => {\r\n    this.fields[name] = Comp;\r\n  };\r\n\r\n  unregisterField = (name: string) => {\r\n    delete this.fields[name];\r\n  };\r\n\r\n  componentDidMount() {\r\n    this.didMount = true;\r\n  }\r\n\r\n  componentWillUnmount() {\r\n    // This allows us to prevent setting state on an\r\n    // unmounted component. This can occur if Formik is in a modal, and submission\r\n    // toggles show/hide, and validation of a blur field takes longer than validation\r\n    // before a submit.\r\n    // @see https://github.com/jaredpalmer/formik/issues/597\r\n    // @see https://reactjs.org/blog/2015/12/16/ismounted-antipattern.html\r\n    this.didMount = false;\r\n\r\n    // Cancel validation on unmount.\r\n    if (this.validator) {\r\n      this.validator();\r\n    }\r\n  }\r\n\r\n  componentDidUpdate(prevProps: Readonly<FormikConfig<Values>>) {\r\n    // If the initialValues change, reset the form\r\n    if (\r\n      this.props.enableReinitialize &&\r\n      !isEqual(prevProps.initialValues, this.props.initialValues)\r\n    ) {\r\n      this.initialValues = this.props.initialValues;\r\n      // @todo refactor to use getDerivedStateFromProps?\r\n      this.resetForm(this.props.initialValues);\r\n    }\r\n  }\r\n\r\n  setErrors = (errors: FormikErrors<Values>) => {\r\n    this.setState({ errors });\r\n  };\r\n\r\n  setTouched = (touched: FormikTouched<Values>) => {\r\n    this.setState({ touched }, () => {\r\n      if (this.props.validateOnBlur) {\r\n        this.runValidations(this.state.values);\r\n      }\r\n    });\r\n  };\r\n\r\n  setValues = (values: FormikState<Values>['values']) => {\r\n    this.setState({ values }, () => {\r\n      if (this.props.validateOnChange) {\r\n        this.runValidations(values);\r\n      }\r\n    });\r\n  };\r\n\r\n  setStatus = (status?: any) => {\r\n    this.setState({ status });\r\n  };\r\n\r\n  setError = (error: any) => {\r\n    if (process.env.NODE_ENV !== 'production') {\r\n      console.warn(\r\n        `Warning: Formik\\'s setError(error) is deprecated and may be removed in future releases. Please use Formik\\'s setStatus(status) instead. It works identically. For more info see https://github.com/jaredpalmer/formik#setstatus-status-any--void`\r\n      );\r\n    }\r\n    this.setState({ error });\r\n  };\r\n\r\n  setSubmitting = (isSubmitting: boolean) => {\r\n    if (this.didMount) {\r\n      this.setState({ isSubmitting });\r\n    }\r\n  };\r\n\r\n  /**\r\n   * Run field level validation\r\n   */\r\n  validateField = (field: string): Promise<Object> => {\r\n    this.setState({ isValidating: true });\r\n    return this.runSingleFieldLevelValidation(\r\n      field,\r\n      getIn(this.state.values, field)\r\n    ).then(error => {\r\n      if (this.didMount) {\r\n        this.setState({\r\n          errors: setIn(this.state.errors, field, error),\r\n          isValidating: false,\r\n        });\r\n      }\r\n      return error;\r\n    });\r\n  };\r\n\r\n  runSingleFieldLevelValidation = (\r\n    field: string,\r\n    value: void | string\r\n  ): Promise<string> => {\r\n    return new Promise(resolve =>\r\n      resolve(this.fields[field].props.validate(value))\r\n    ).then(x => x, e => e);\r\n  };\r\n\r\n  runFieldLevelValidations(\r\n      values: FormikValues,\r\n      fieldId?: string\r\n  ): Promise<FormikErrors<Values>> {\r\n      let fieldKeysWithValidation: string[] = [];\r\n\r\n      if (!fieldId) {\r\n          fieldKeysWithValidation = Object.keys(this.fields).filter(\r\n              f =>\r\n                  this.fields &&\r\n                  this.fields[f] &&\r\n                  this.fields[f].props.validate &&\r\n                  isFunction(this.fields[f].props.validate)\r\n          );\r\n      }\r\n      else if (this.fields && this.fields[fieldId] && this.fields[fieldId].props.validate\r\n          && isFunction(this.fields[fieldId].props.validate)) {\r\n\r\n            fieldKeysWithValidation = [fieldId];\r\n      }\r\n\r\n    // Construct an array with all of the field validation functions\r\n    const fieldValidations: Promise<string>[] =\r\n      fieldKeysWithValidation.length > 0\r\n        ? fieldKeysWithValidation.map(f =>\r\n            this.runSingleFieldLevelValidation(f, getIn(values, f))\r\n          )\r\n        : [Promise.resolve('DO_NOT_DELETE_YOU_WILL_BE_FIRED')]; // use special case ;)\r\n\r\n    return Promise.all(fieldValidations).then((fieldErrorsList: string[]) =>\r\n      fieldErrorsList.reduce(\r\n        (prev, curr, index) => {\r\n          if (curr === 'DO_NOT_DELETE_YOU_WILL_BE_FIRED') {\r\n            return prev;\r\n          }\r\n          if (!!curr) {\r\n            prev = setIn(prev, fieldKeysWithValidation[index], curr);\r\n          }\r\n          return prev;\r\n        },\r\n        {} as FormikErrors<Values>\r\n      )\r\n    );\r\n  }\r\n\r\n  runValidateHandler(values: FormikValues): Promise<FormikErrors<Values>> {\r\n    return new Promise(resolve => {\r\n      const maybePromisedErrors = (this.props.validate as any)(values);\r\n      if (maybePromisedErrors === undefined) {\r\n        resolve({});\r\n      } else if (isPromise(maybePromisedErrors)) {\r\n        (maybePromisedErrors as Promise<any>).then(\r\n          () => {\r\n            resolve({});\r\n          },\r\n          errors => {\r\n            resolve(errors);\r\n          }\r\n        );\r\n      } else {\r\n        resolve(maybePromisedErrors);\r\n      }\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Run validation against a Yup schema and optionally run a function if successful\r\n   */\r\n  runValidationSchema = (values: FormikValues) => {\r\n    return new Promise(resolve => {\r\n      const { validationSchema } = this.props;\r\n      const schema = isFunction(validationSchema)\r\n        ? validationSchema()\r\n        : validationSchema;\r\n      validateYupSchema(values, schema).then(\r\n        () => {\r\n          resolve({});\r\n        },\r\n        (err: any) => {\r\n          resolve(yupToFormErrors(err));\r\n        }\r\n      );\r\n    });\r\n  };\r\n\r\n  /**\r\n   * Run all validations methods and update state accordingly\r\n   */\r\n  runValidations = (\r\n      values: FormikValues = this.state.values,\r\n      fieldId?: string\r\n  ): Promise<FormikErrors<Values>> => {\r\n    if (this.validator) {\r\n      this.validator();\r\n    }\r\n\r\n    const [promise, cancel] = makeCancelable(\r\n      Promise.all([\r\n        this.runFieldLevelValidations(values, fieldId),\r\n        this.props.validationSchema ? this.runValidationSchema(values) : {},\r\n        this.props.validate ? this.runValidateHandler(values) : {},\r\n      ]).then(([fieldErrors, schemaErrors, handlerErrors]) => {\r\n        return deepmerge.all<FormikErrors<Values>>(\r\n          [fieldErrors, schemaErrors, handlerErrors],\r\n          { arrayMerge }\r\n        );\r\n      })\r\n    );\r\n    this.validator = cancel;\r\n    return promise\r\n      .then((errors: FormikErrors<Values>) => {\r\n        if (this.didMount) {\r\n          this.setState(prevState => {\r\n              if (!isEqual(prevState.errors, errors)) {\r\n                  if (fieldId && !Object.prototype.hasOwnProperty.call(errors, fieldId)) {\r\n                      const errors = Object.keys(prevState.errors).reduce((newObj: any, key) => {\r\n                          if (key !== fieldId) {\r\n                              newObj[key] = (prevState.errors as any)[key];\r\n                          }\r\n\r\n                          return newObj\r\n                      }, {});\r\n\r\n                      return {\r\n                          errors: errors\r\n                      }\r\n                  } else {\r\n                      return {\r\n                          errors: Object.assign({}, prevState.errors, errors)\r\n                      };\r\n                  }\r\n              }\r\n              return null; // abort the update\r\n          });\r\n        }\r\n        return errors;\r\n      })\r\n      .catch(x => x);\r\n  };\r\n\r\n  handleChange = (\r\n    eventOrPath: string | React.ChangeEvent<any>\r\n  ): void | ((eventOrValue: unknown | React.ChangeEvent<any>) => void) => {\r\n    // this function actually handles the change\r\n    const executeChange = (\r\n      eventOrValue: unknown | React.ChangeEvent<any>,\r\n      maybePath?: string\r\n    ) => {\r\n      // To allow using handleChange with React Native (Web) or other UI libraries, we\r\n      // allow for the first argument to be either a value or the standard change event.\r\n      let field = maybePath;\r\n        let value: unknown;\r\n\r\n      if (isInputEvent(eventOrValue)) {\r\n        const event = eventOrValue as React.ChangeEvent<any>;\r\n        // If we can, persist the event, https://reactjs.org/docs/events.html#event-pooling\r\n        if (event.persist) {\r\n          event.persist();\r\n        }\r\n        const { type, name, id, checked, outerHTML } = event.target;\r\n        field = maybePath ? maybePath : name ? name : id;\r\n        if (!field && process.env.NODE_ENV !== 'production') {\r\n          warnAboutMissingIdentifier({\r\n            htmlContent: outerHTML,\r\n            documentationAnchorLink: 'handlechange-e-reactchangeeventany--void',\r\n            handlerName: 'handleChange',\r\n          });\r\n        }\r\n        value = event.target.value;\r\n        if (/number|range/.test(type)) {\r\n          const parsed = parseFloat(event.target.value);\r\n          value = isNaN(parsed) ? '' : parsed;\r\n        }\r\n        if (/checkbox/.test(type)) {\r\n          value = checked;\r\n        }\r\n      } else {\r\n        value = eventOrValue;\r\n      }\r\n\r\n        if (field) {        \r\n            // Set form fields by name\r\n            this.setState(prevState => ({\r\n                ...prevState,\r\n                values: setIn(prevState.values, field!, value)\r\n            }),\r\n            () => {\r\n                if (this.props.validateOnChange) {\r\n                    this.runValidations(setIn(this.state.values, field!, value), field!);\r\n                }\r\n            });\r\n        }\r\n    };\r\n\r\n    // Actually execute logic above....\r\n    if (isString(eventOrPath)) {\r\n      const path = eventOrPath;\r\n      // cache these handlers by key like Preact's linkState does for perf boost\r\n      if (!isFunction(this.hcCache[path])) {\r\n        // set a new handle function in cache\r\n        this.hcCache[path] = (eventOrValue: unknown | React.ChangeEvent<any>) =>\r\n          executeChange(eventOrValue, path);\r\n      }\r\n      return this.hcCache[path]; // return the cached function\r\n    } else {\r\n      const event = eventOrPath;\r\n      executeChange(event);\r\n    }\r\n  };\r\n\r\n  setFieldValue = (\r\n    field: string,\r\n    value: any,\r\n    shouldValidate: boolean = true\r\n  ) => {\r\n    if (this.didMount) {\r\n      // Set form field by name\r\n      this.setState(\r\n        prevState => ({\r\n          ...prevState,\r\n          values: setIn(prevState.values, field, value),\r\n        }),\r\n        () => {\r\n          if (this.props.validateOnChange && shouldValidate) {\r\n            this.runValidations(this.state.values, field);\r\n          }\r\n        }\r\n      );\r\n    }\r\n  };\r\n\r\n  handleSubmit = (e: React.FormEvent<HTMLFormElement> | undefined) => {\r\n    if (e && e.preventDefault) {\r\n      e.preventDefault();\r\n    }\r\n\r\n    // Warn if form submission is triggered by a <button> without a\r\n    // specified `type` attribute during development. This mitigates\r\n    // a common gotcha in forms with both reset and submit buttons,\r\n    // where the dev forgets to add type=\"button\" to the reset button.\r\n    if (\r\n      process.env.NODE_ENV !== 'production' &&\r\n      typeof document !== 'undefined'\r\n    ) {\r\n      // Safely get the active element (works with IE)\r\n      const activeElement = getActiveElement();\r\n      if (\r\n        activeElement !== null &&\r\n        activeElement instanceof HTMLButtonElement\r\n      ) {\r\n        warning(\r\n          !!(\r\n            activeElement.attributes &&\r\n            activeElement.attributes.getNamedItem('type')\r\n          ),\r\n          'You submitted a Formik form using a button with an unspecified `type` attribute.  Most browsers default button elements to `type=\"submit\"`. If this is not a submit button, please add `type=\"button\"`.'\r\n        );\r\n      }\r\n    }\r\n\r\n    this.submitForm();\r\n  };\r\n\r\n    //Modificado WIS:\r\n\r\n  submitForm = () => {\r\n      if (this.props.validateOnSubmit) {\r\n          this.submitFormWithValidation();\r\n      }\r\n      else {\r\n          this.submitFormWithoutValidation();\r\n      }\r\n  };\r\n\r\n    submitFormWithoutValidation = () => {\r\n        // Recursively set all values to `true`.\r\n        this.setState(prevState => ({\r\n            isSubmitting: true,\r\n            submitCount: prevState.submitCount + 1,\r\n        }));\r\n\r\n        return new Promise((resolve) => {\r\n            this.executeSubmit();\r\n            resolve();\r\n        });\r\n    }\r\n\r\n    submitFormWithValidation = () => {\r\n        // Recursively set all values to `true`.\r\n        this.setState(prevState => ({\r\n            touched: setNestedObjectValues<FormikTouched<Values>>(\r\n                prevState.values,\r\n                true\r\n            ),\r\n            isSubmitting: true,\r\n            isValidating: true,\r\n            submitCount: prevState.submitCount + 1,\r\n        }));\r\n\r\n        return this.runValidations(this.state.values).then(combinedErrors => {\r\n            if (this.didMount) {\r\n                this.setState({ isValidating: false });\r\n            }\r\n            const isValid = Object.keys(combinedErrors).length === 0;\r\n            if (isValid) {\r\n                this.executeSubmit();\r\n            } else if (this.didMount) {\r\n                // ^^^ Make sure Formik is still mounted before calling setState\r\n                this.setState({ isSubmitting: false });\r\n            }\r\n        });\r\n    }\r\n\r\n    //Fin modificacion WIS\r\n\r\n  executeSubmit = () => {\r\n    this.props.onSubmit(this.state.values, this.getFormikActions());\r\n  };\r\n\r\n  handleBlur = (\r\n    eventOrPath: string | React.FocusEvent<any>\r\n  ): void | ((e?: React.FocusEvent<any>) => void) => {\r\n    const executeBlur = (\r\n      maybeEvent?: React.FocusEvent<any>,\r\n      maybePath?: string\r\n    ) => {\r\n      let field = maybePath;\r\n      if (isInputEvent(maybeEvent)) {\r\n        const event = maybeEvent as React.FocusEvent<any>;\r\n        // If we can, persist the event, https://reactjs.org/docs/events.html#event-pooling\r\n        if (event.persist) {\r\n          event.persist();\r\n        }\r\n        const { name, id, outerHTML } = event.target;\r\n        field = name ? name : id;\r\n        if (!field && process.env.NODE_ENV !== 'production') {\r\n          warnAboutMissingIdentifier({\r\n            htmlContent: outerHTML,\r\n            documentationAnchorLink: 'handleblur-e-reactfocuseventany--void',\r\n            handlerName: 'handleBlur',\r\n          });\r\n        }\r\n      }\r\n\r\n      this.setState(prevState => ({\r\n        touched: setIn(prevState.touched, field!, true),\r\n      }));\r\n\r\n      if (this.props.validateOnBlur) {\r\n        this.runValidations(this.state.values, field!);\r\n      }\r\n    };\r\n    if (isString(eventOrPath)) {\r\n      const path = eventOrPath;\r\n      // cache these handlers by key like Preact's linkState does for perf boost\r\n      if (!isFunction(this.hbCache[path])) {\r\n        // set a new handle function in cache\r\n        this.hbCache[path] = (event?: React.FocusEvent<any>) =>\r\n          executeBlur(event, path);\r\n      }\r\n      return this.hbCache[path]; // return the cached function\r\n    } else {\r\n      const event = eventOrPath;\r\n      executeBlur(event);\r\n    }\r\n  };\r\n\r\n  setFieldTouched = (\r\n    field: string,\r\n    touched: boolean = true,\r\n    shouldValidate: boolean = true\r\n  ) => {\r\n    // Set touched field by name\r\n    this.setState(\r\n      prevState => ({\r\n        ...prevState,\r\n        touched: setIn(prevState.touched, field, touched),\r\n      }),\r\n      () => {\r\n        if (this.props.validateOnBlur && shouldValidate) {\r\n          this.runValidations(this.state.values, field);\r\n        }\r\n      }\r\n    );\r\n  };\r\n\r\n  setFieldError = (field: string, message: string | undefined) => {\r\n    // Set form field by name\r\n    this.setState(prevState => ({\r\n      ...prevState,\r\n      errors: setIn(prevState.errors, field, message),\r\n    }));\r\n  };\r\n\r\n    setFieldPristine = (field: string) => {\r\n        this.setState(\r\n            prevState => ({\r\n                ...prevState,\r\n                touched: setIn(prevState.touched, field, undefined)\r\n            })\r\n        );\r\n    };\r\n\r\n    resetForm = (nextValues?: Values, postUpdate?: (() => void)) => {\r\n        const values = nextValues ? nextValues : this.props.initialValues;\r\n\r\n        this.initialValues = values;\r\n\r\n        if (!postUpdate)\r\n            postUpdate = () => {};\r\n\r\n        this.setState({\r\n          isSubmitting: false,\r\n          isValidating: false,\r\n          errors: {},\r\n          touched: {},\r\n          error: undefined,\r\n          status: this.props.initialStatus,\r\n          values,\r\n            submitCount: 0,\r\n        }, postUpdate);\r\n      };\r\n\r\n  handleReset = () => {\r\n    if (this.props.onReset) {\r\n      const maybePromisedOnReset = (this.props.onReset as any)(\r\n        this.state.values,\r\n        this.getFormikActions()\r\n      );\r\n\r\n      if (isPromise(maybePromisedOnReset)) {\r\n        (maybePromisedOnReset as Promise<any>).then(this.resetForm);\r\n      } else {\r\n        this.resetForm();\r\n      }\r\n    } else {\r\n      this.resetForm();\r\n    }\r\n  };\r\n\r\n  setFormikState = (s: any, callback?: (() => void)) =>\r\n    this.setState(s, callback);\r\n\r\n  validateForm = (values: Values) => {\r\n    this.setState({ isValidating: true });\r\n    return this.runValidations(values).then(errors => {\r\n      if (this.didMount) {\r\n        this.setState({ isValidating: false });\r\n      }\r\n      return errors;\r\n    });\r\n  };\r\n\r\n  getFormikActions = (): FormikActions<Values> => {\r\n    return {\r\n      resetForm: this.resetForm,\r\n      submitForm: this.submitForm,\r\n      validateForm: this.validateForm,\r\n      validateField: this.validateField,\r\n      setError: this.setError,\r\n      setErrors: this.setErrors,\r\n      setFieldError: this.setFieldError,\r\n      setFieldTouched: this.setFieldTouched,\r\n      setFieldValue: this.setFieldValue,\r\n      setStatus: this.setStatus,\r\n      setSubmitting: this.setSubmitting,\r\n      setTouched: this.setTouched,\r\n      setValues: this.setValues,\r\n      setFormikState: this.setFormikState,\r\n    };\r\n  };\r\n\r\n  getFormikComputedProps = () => {\r\n    const { isInitialValid } = this.props;\r\n    const dirty = !isEqual(this.initialValues, this.state.values);\r\n    return {\r\n      dirty,\r\n      isValid: dirty\r\n        ? this.state.errors && Object.keys(this.state.errors).length === 0\r\n        : isInitialValid !== false && isFunction(isInitialValid)\r\n          ? (isInitialValid as (props: this['props']) => boolean)(this.props)\r\n          : (isInitialValid as boolean),\r\n      initialValues: this.initialValues,\r\n    };\r\n  };\r\n\r\n  getFormikBag = () => {\r\n    return {\r\n      ...this.state,\r\n      ...this.getFormikActions(),\r\n      ...this.getFormikComputedProps(),\r\n      // Field needs to communicate with Formik during resets\r\n      registerField: this.registerField,\r\n      unregisterField: this.unregisterField,\r\n      handleBlur: this.handleBlur,\r\n      handleChange: this.handleChange,\r\n      handleReset: this.handleReset,\r\n      handleSubmit: this.handleSubmit,\r\n      validateOnChange: this.props.validateOnChange,\r\n      validateOnBlur: this.props.validateOnBlur,\r\n    };\r\n  };\r\n\r\n  getFormikContext = () => {\r\n    return {\r\n      ...this.getFormikBag(),\r\n      validationSchema: this.props.validationSchema,\r\n      validate: this.props.validate,\r\n      initialValues: this.initialValues,\r\n    };\r\n  };\r\n\r\n  render() {\r\n    const { component, render, children } = this.props;\r\n    const props = this.getFormikBag();\r\n    const ctx = this.getFormikContext();\r\n    return (\r\n      <FormikProvider value={ctx}>\r\n        {component\r\n          ? React.createElement(component as any, props)\r\n          : render\r\n            ? render(props)\r\n            : children // children come last, always called\r\n              ? isFunction(children)\r\n                ? (children as ((\r\n                    props: FormikProps<Values>\r\n                  ) => React.ReactNode))(props as FormikProps<Values>)\r\n                : !isEmptyChildren(children)\r\n                  ? React.Children.only(children)\r\n                  : null\r\n              : null}\r\n      </FormikProvider>\r\n    );\r\n  }\r\n}\r\n\r\nfunction warnAboutMissingIdentifier({\r\n  htmlContent,\r\n  documentationAnchorLink,\r\n  handlerName,\r\n}: {\r\n  htmlContent: string;\r\n  documentationAnchorLink: string;\r\n  handlerName: string;\r\n}) {\r\n  console.warn(\r\n    `Warning: Formik called \\`${handlerName}\\`, but you forgot to pass an \\`id\\` or \\`name\\` attribute to your input:\r\n\r\n    ${htmlContent}\r\n\r\n    Formik cannot determine which value to update. For more info see https://github.com/jaredpalmer/formik#${documentationAnchorLink}\r\n  `\r\n  );\r\n}\r\n\r\n/**\r\n * Transform Yup ValidationError to a more usable object\r\n */\r\nexport function yupToFormErrors<Values>(yupError: any): FormikErrors<Values> {\r\n  let errors: any = {} as FormikErrors<Values>;\r\n  if (yupError.inner.length === 0) {\r\n    return setIn(errors, yupError.path, yupError.message);\r\n  }\r\n  for (let err of yupError.inner) {\r\n    if (!errors[err.path]) {\r\n      errors = setIn(errors, err.path, err.message);\r\n    }\r\n  }\r\n  return errors;\r\n}\r\n\r\n/**\r\n * Validate a yup schema.\r\n */\r\nexport function validateYupSchema<T extends FormikValues>(\r\n  values: T,\r\n  schema: any,\r\n  sync: boolean = false,\r\n  context: any = {}\r\n): Promise<Partial<T>> {\r\n  let validateData: Partial<T> = {};\r\n  for (let k in values) {\r\n    if (values.hasOwnProperty(k)) {\r\n      const key = String(k);\r\n      validateData[key] = values[key] !== '' ? values[key] : undefined;\r\n    }\r\n  }\r\n  return schema[sync ? 'validateSync' : 'validate'](validateData, {\r\n    abortEarly: false,\r\n    context: context,\r\n  });\r\n}\r\n\r\n/**\r\n * deepmerge array merging algorithm\r\n * https://github.com/KyleAMathews/deepmerge#combine-array\r\n */\r\nfunction arrayMerge(target: any[], source: any[], options: any): any[] {\r\n  const destination = target.slice();\r\n\r\n  source.forEach(function(e: any, i: number) {\r\n    if (typeof destination[i] === 'undefined') {\r\n      const cloneRequested = options.clone !== false;\r\n      const shouldClone = cloneRequested && options.isMergeableObject(e);\r\n      destination[i] = shouldClone\r\n        ? deepmerge(Array.isArray(e) ? [] : {}, e, options)\r\n        : e;\r\n    } else if (options.isMergeableObject(e)) {\r\n      destination[i] = deepmerge(target[i], e, options);\r\n    } else if (target.indexOf(e) === -1) {\r\n      destination.push(e);\r\n    }\r\n  });\r\n  return destination;\r\n}\r\n","import * as React from 'react';\nimport cloneDeep from 'lodash/cloneDeep';\nimport { connect } from './connect';\nimport {\n  FormikContext,\n  FormikState,\n  SharedRenderProps,\n  FormikProps,\n} from './types';\nimport { getIn, isEmptyChildren, isFunction, setIn } from './utils';\n\nexport type FieldArrayRenderProps = ArrayHelpers & {\n  form: FormikProps<any>;\n  name: string;\n};\n\nexport type FieldArrayConfig = {\n  /** Really the path to the array field to be updated */\n  name: string;\n  /** Should field array validate the form AFTER array updates/changes? */\n  validateOnChange?: boolean;\n} & SharedRenderProps<FieldArrayRenderProps>;\nexport interface ArrayHelpers {\n  /** Imperatively add a value to the end of an array */\n  push: (obj: any) => void;\n  /** Curried fn to add a value to the end of an array */\n  handlePush: (obj: any) => () => void;\n  /** Imperatively swap two values in an array */\n  swap: (indexA: number, indexB: number) => void;\n  /** Curried fn to swap two values in an array */\n  handleSwap: (indexA: number, indexB: number) => () => void;\n  /** Imperatively move an element in an array to another index */\n  move: (from: number, to: number) => void;\n  /** Imperatively move an element in an array to another index */\n  handleMove: (from: number, to: number) => () => void;\n  /** Imperatively insert an element at a given index into the array */\n  insert: (index: number, value: any) => void;\n  /** Curried fn to insert an element at a given index into the array */\n  handleInsert: (index: number, value: any) => () => void;\n  /** Imperatively replace a value at an index of an array  */\n  replace: (index: number, value: any) => void;\n  /** Curried fn to replace an element at a given index into the array */\n  handleReplace: (index: number, value: any) => () => void;\n  /** Imperatively add an element to the beginning of an array and return its length */\n  unshift: (value: any) => number;\n  /** Curried fn to add an element to the beginning of an array */\n  handleUnshift: (value: any) => () => void;\n  /** Curried fn to remove an element at an index of an array */\n  handleRemove: (index: number) => () => void;\n  /** Curried fn to remove a value from the end of the array */\n  handlePop: () => () => void;\n  /** Imperatively remove and element at an index of an array */\n  remove<T>(index: number): T | undefined;\n  /** Imperatively remove and return value from the end of the array */\n  pop<T>(): T | undefined;\n}\n\n/**\n * Some array helpers!\n */\nexport const move = (array: any[], from: number, to: number) => {\n  const copy = [...(array || [])];\n  const value = copy[from];\n  copy.splice(from, 1);\n  copy.splice(to, 0, value);\n  return copy;\n};\n\nexport const swap = (array: any[], indexA: number, indexB: number) => {\n  const copy = [...(array || [])];\n  const a = copy[indexA];\n  copy[indexA] = copy[indexB];\n  copy[indexB] = a;\n  return copy;\n};\n\nexport const insert = (array: any[], index: number, value: any) => {\n  const copy = [...(array || [])];\n  copy.splice(index, 0, value);\n  return copy;\n};\n\nexport const replace = (array: any[], index: number, value: any) => {\n  const copy = [...(array || [])];\n  copy[index] = value;\n  return copy;\n};\nclass FieldArrayInner<Values = {}> extends React.Component<\n  FieldArrayConfig & { formik: FormikContext<Values> },\n  {}\n> {\n  static defaultProps = {\n    validateOnChange: true,\n  };\n\n  constructor(props: FieldArrayConfig & { formik: FormikContext<Values> }) {\n    super(props);\n    // We need TypeScript generics on these, so we'll bind them in the constructor\n    this.remove = this.remove.bind(this) as any;\n    this.pop = this.pop.bind(this) as any;\n  }\n\n  updateArrayField = (\n    fn: Function,\n    alterTouched: boolean | Function,\n    alterErrors: boolean | Function\n  ) => {\n    const {\n      name,\n      validateOnChange,\n      formik: { setFormikState, validateForm },\n    } = this.props;\n    setFormikState(\n      (prevState: FormikState<any>) => {\n        let updateErrors = typeof alterErrors === 'function' ? alterErrors : fn;\n        let updateTouched =\n          typeof alterTouched === 'function' ? alterTouched : fn;\n\n        return {\n          ...prevState,\n          values: setIn(\n            prevState.values,\n            name,\n            fn(getIn(prevState.values, name))\n          ),\n          errors: alterErrors\n            ? setIn(\n                prevState.errors,\n                name,\n                updateErrors(getIn(prevState.errors, name))\n              )\n            : prevState.errors,\n          touched: alterTouched\n            ? setIn(\n                prevState.touched,\n                name,\n                updateTouched(getIn(prevState.touched, name))\n              )\n            : prevState.touched,\n        };\n      },\n      () => {\n        if (validateOnChange) {\n          validateForm();\n        }\n      }\n    );\n  };\n\n  push = (value: any) =>\n    this.updateArrayField(\n      (array: any[]) => [...(array || []), cloneDeep(value)],\n      false,\n      false\n    );\n\n  handlePush = (value: any) => () => this.push(value);\n\n  swap = (indexA: number, indexB: number) =>\n    this.updateArrayField(\n      (array: any[]) => swap(array, indexA, indexB),\n      true,\n      true\n    );\n\n  handleSwap = (indexA: number, indexB: number) => () =>\n    this.swap(indexA, indexB);\n\n  move = (from: number, to: number) =>\n    this.updateArrayField((array: any[]) => move(array, from, to), true, true);\n\n  handleMove = (from: number, to: number) => () => this.move(from, to);\n\n  insert = (index: number, value: any) =>\n    this.updateArrayField(\n      (array: any[]) => insert(array, index, value),\n      (array: any[]) => insert(array, index, null),\n      (array: any[]) => insert(array, index, null)\n    );\n\n  handleInsert = (index: number, value: any) => () => this.insert(index, value);\n\n  replace = (index: number, value: any) =>\n    this.updateArrayField(\n      (array: any[]) => replace(array, index, value),\n      false,\n      false\n    );\n\n  handleReplace = (index: number, value: any) => () =>\n    this.replace(index, value);\n\n  unshift = (value: any) => {\n    let length = -1;\n    this.updateArrayField(\n      (array: any[]) => {\n        const arr = array ? [value, ...array] : [value];\n        if (length < 0) {\n          length = arr.length;\n        }\n        return arr;\n      },\n      (array: any[]) => {\n        const arr = array ? [null, ...array] : [null];\n        if (length < 0) length = arr.length;\n        return arr;\n      },\n      (array: any[]) => {\n        const arr = array ? [null, ...array] : [null];\n        if (length < 0) length = arr.length;\n        return arr;\n      }\n    );\n    return length;\n  };\n\n  handleUnshift = (value: any) => () => this.unshift(value);\n\n  remove<T>(index: number): T {\n    // We need to make sure we also remove relevant pieces of `touched` and `errors`\n    let result: any;\n    this.updateArrayField(\n      // so this gets call 3 times\n      (array?: any[]) => {\n        const copy = array ? [...array] : [];\n        if (!result) {\n          result = copy[index];\n        }\n        if (isFunction(copy.splice)) {\n          copy.splice(index, 1);\n        }\n        return copy;\n      },\n      true,\n      true\n    );\n\n    return result;\n  }\n\n  handleRemove = (index: number) => () => this.remove<any>(index);\n\n  pop<T>(): T {\n    // Remove relevant pieces of `touched` and `errors` too!\n    let result: any;\n    this.updateArrayField(\n      // so this gets call 3 times\n      (array: any[]) => {\n        const tmp = array;\n        if (!result) {\n          result = tmp && tmp.pop && tmp.pop();\n        }\n        return tmp;\n      },\n      true,\n      true\n    );\n\n    return result;\n  }\n\n  handlePop = () => () => this.pop<any>();\n\n  render() {\n    const arrayHelpers: ArrayHelpers = {\n      push: this.push,\n      pop: this.pop,\n      swap: this.swap,\n      move: this.move,\n      insert: this.insert,\n      replace: this.replace,\n      unshift: this.unshift,\n      remove: this.remove,\n      handlePush: this.handlePush,\n      handlePop: this.handlePop,\n      handleSwap: this.handleSwap,\n      handleMove: this.handleMove,\n      handleInsert: this.handleInsert,\n      handleReplace: this.handleReplace,\n      handleUnshift: this.handleUnshift,\n      handleRemove: this.handleRemove,\n    };\n\n    const {\n      component,\n      render,\n      children,\n      name,\n      formik: {\n        validate: _validate,\n        validationSchema: _validationSchema,\n        ...restOfFormik\n      },\n    } = this.props;\n\n    const props: FieldArrayRenderProps = {\n      ...arrayHelpers,\n      form: restOfFormik,\n      name,\n    };\n\n    return component\n      ? React.createElement(component as any, props)\n      : render\n        ? (render as any)(props)\n        : children // children come last, always called\n          ? typeof children === 'function'\n            ? (children as any)(props)\n            : !isEmptyChildren(children) ? React.Children.only(children) : null\n          : null;\n  }\n}\n\nexport const FieldArray = connect<FieldArrayConfig, any>(FieldArrayInner);\n","import * as React from 'react';\nimport { FormikContext } from './types';\nimport { getIn, isFunction } from './utils';\nimport { connect } from './connect';\n\nexport interface ErrorMessageProps {\n  name: string;\n  className?: string;\n  component?: string | React.ComponentType;\n  children?: ((errorMessage: string) => React.ReactNode);\n  render?: ((errorMessage: string) => React.ReactNode);\n}\n\nclass ErrorMessageImpl extends React.Component<\n  ErrorMessageProps & { formik: FormikContext<any> }\n> {\n  shouldComponentUpdate(\n    props: ErrorMessageProps & { formik: FormikContext<any> }\n  ) {\n    if (\n      getIn(this.props.formik.errors, this.props.name) !==\n        getIn(props.formik.errors, this.props.name) ||\n      getIn(this.props.formik.touched, this.props.name) !==\n        getIn(props.formik.touched, this.props.name) ||\n      Object.keys(this.props).length !== Object.keys(props).length\n    ) {\n      return true;\n    } else {\n      return false;\n    }\n  }\n\n  render() {\n    let { component, formik, render, children, name, ...rest } = this.props;\n\n    const touch = getIn(formik.touched, name);\n    const error = getIn(formik.errors, name);\n\n    return !!touch && !!error\n      ? render\n        ? isFunction(render) ? render(error) : null\n        : children\n          ? isFunction(children) ? children(error) : null\n          : component\n            ? React.createElement(component, rest as any, error)\n            : error\n      : null;\n  }\n}\n\nexport const ErrorMessage = connect<\n  ErrorMessageProps,\n  ErrorMessageProps & { formik: FormikContext<any> }\n>(ErrorMessageImpl);\n"],"names":[],"mappings":"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"}