{"version":3,"file":"formik-custom.cjs.production.js","sources":["../src/connect.tsx","../src/utils.ts","../src/Formik.tsx","../src/Field.tsx","../src/Form.tsx","../src/FieldArray.tsx","../src/FastField.tsx","../src/ErrorMessage.tsx","../src/withFormik.tsx"],"sourcesContent":["import * as React from 'react';\nimport hoistNonReactStatics from 'hoist-non-react-statics';\nimport createContext from 'create-react-context';\nimport { FormikContext } from './types';\n\nexport const {\n  Provider: FormikProvider,\n  Consumer: FormikConsumer,\n} = createContext<FormikContext<any>>({} as any);\n\n/**\n * Connect any component to Formik context, and inject as a prop called `formik`;\n * @param Comp React Component\n */\nexport function connect<OuterProps, Values = {}>(\n  Comp: React.ComponentType<OuterProps & { formik: FormikContext<Values> }>\n) {\n  const C: React.SFC<OuterProps> = (props: OuterProps) => (\n    <FormikConsumer>\n      {formik => <Comp {...props} formik={formik} />}\n    </FormikConsumer>\n  );\n  const componentDisplayName =\n    Comp.displayName ||\n    Comp.name ||\n    (Comp.constructor && Comp.constructor.name) ||\n    'Component';\n\n  // Assign Comp to C.WrappedComponent so we can access the inner component in tests\n  // For example, <Field.WrappedComponent /> gets us <FieldInner/>\n  (C as React.SFC<OuterProps> & {\n    WrappedComponent: React.ReactNode;\n  }).WrappedComponent = Comp;\n\n  C.displayName = `FormikConnect(${componentDisplayName})`;\n\n  return hoistNonReactStatics<\n    OuterProps,\n    OuterProps & { formik: FormikContext<Values> }\n  >(\n    C,\n    Comp as React.ComponentClass<OuterProps & { formik: FormikContext<Values> }> // cast type to ComponentClass (even if SFC)\n  );\n}\n","import clone from 'lodash/clone';\nimport toPath from 'lodash/toPath';\nimport * as React from 'react';\n\n// Assertions\n\n/** @private is the given object a Function? */\nexport const isFunction = (obj: any): obj is Function =>\n  typeof obj === 'function';\n\n/** @private is the given object an Object? */\nexport const isObject = (obj: any): boolean =>\n  obj !== null && typeof obj === 'object';\n\n/** @private is the given object an integer? */\nexport const isInteger = (obj: any): boolean =>\n  String(Math.floor(Number(obj))) === obj;\n\n/** @private is the given object a string? */\nexport const isString = (obj: any): obj is string =>\n  Object.prototype.toString.call(obj) === '[object String]';\n\n/** @private is the given object a NaN? */\nexport const isNaN = (obj: any): boolean => obj !== obj;\n\n/** @private Does a React component have exactly 0 children? */\nexport const isEmptyChildren = (children: any): boolean =>\n  React.Children.count(children) === 0;\n\n/** @private is the given object/value a promise? */\nexport const isPromise = (value: any): value is PromiseLike<any> =>\n  isObject(value) && isFunction(value.then);\n\n/** @private is the given object/value a type of synthetic event? */\nexport const isInputEvent = (value: any): value is React.SyntheticEvent<any> =>\n  value && isObject(value) && isObject(value.target);\n\n/**\n * Same as document.activeElement but wraps in a try-catch block. In IE it is\n * not safe to call document.activeElement if there is nothing focused.\n *\n * The activeElement will be null only if the document or document body is not\n * yet defined.\n *\n * @param {?Document} doc Defaults to current document.\n * @return {Element | null}\n * @see https://github.com/facebook/fbjs/blob/master/packages/fbjs/src/core/dom/getActiveElement.js\n */\nexport function getActiveElement(doc?: Document): Element | null {\n  doc = doc || (typeof document !== 'undefined' ? document : undefined);\n  if (typeof doc === 'undefined') {\n    return null;\n  }\n  try {\n    return doc.activeElement || doc.body;\n  } catch (e) {\n    return doc.body;\n  }\n}\n\n/**\n * Make a promise cancellable by @istarkov\n * @see https://reactjs.org/blog/2015/12/16/ismounted-antipattern.html\n */\nexport function makeCancelable<T extends Promise<any>>(\n  promise: T\n): [T, () => void] {\n  let hasCanceled: boolean = false;\n\n  const wrappedPromise: any = new Promise((resolve, reject) => {\n    promise.then(\n      val => (hasCanceled ? reject({ isCanceled: true }) : resolve(val)),\n      error => (hasCanceled ? reject({ isCanceled: true }) : reject(error))\n    );\n  });\n\n  return [\n    wrappedPromise,\n    function cancel() {\n      hasCanceled = true;\n    },\n  ];\n}\n\n/**\n * Deeply get a value from an object via its path.\n */\nexport function getIn(\n  obj: any,\n  key: string | string[],\n  def?: any,\n  p: number = 0\n) {\n  const path = toPath(key);\n  while (obj && p < path.length) {\n    obj = obj[path[p++]];\n  }\n  return obj === undefined ? def : obj;\n}\n\n/**\n * Deeply set a value from in object via it's path. If the value at `path`\n * has changed, return a shallow copy of obj with `value` set at `path`.\n * If `value` has not changed, return the original `obj`.\n *\n * Existing objects / arrays along `path` are also shallow copied. Sibling\n * objects along path retain the same internal js reference. Since new\n * objects / arrays are only created along `path`, we can test if anything\n * changed in a nested structure by comparing the object's reference in\n * the old and new object, similar to how russian doll cache invalidation\n * works.\n *\n * In earlier versions of this function, which used cloneDeep, there were\n * issues whereby settings a nested value would mutate the parent\n * instead of creating a new object. `clone` avoids that bug making a\n * shallow copy of the objects along the update path\n * so no object is mutated in place.\n *\n * Before changing this function, please read through the following\n * discussions.\n *\n * @see https://github.com/developit/linkstate\n * @see https://github.com/jaredpalmer/formik/pull/123\n */\nexport function setIn(obj: any, path: string, value: any): any {\n  let res: any = clone(obj); // this keeps inheritance when obj is a class\n  let resVal: any = res;\n  let i = 0;\n  let pathArray = toPath(path);\n\n  for (; i < pathArray.length - 1; i++) {\n    const currentPath: string = pathArray[i];\n    let currentObj: any = getIn(obj, pathArray.slice(0, i + 1));\n\n    if (currentObj) {\n      resVal = resVal[currentPath] = clone(currentObj);\n    } else {\n      const nextPath: string = pathArray[i + 1];\n      resVal = resVal[currentPath] =\n        isInteger(nextPath) && Number(nextPath) >= 0 ? [] : {};\n    }\n  }\n\n  // Return original object if new value is the same as current\n  if ((i === 0 ? obj : resVal)[pathArray[i]] === value) {\n    return obj;\n  }\n\n  if (value === undefined) {\n    delete resVal[pathArray[i]];\n  } else {\n    resVal[pathArray[i]] = value;\n  }\n\n  // If the path array has a single element, the loop did not run.\n  // Deleting on `resVal` had no effect in this scenario, so we delete on the result instead.\n  if (i === 0 && value === undefined) {\n    delete res[pathArray[i]];\n  }\n\n  return res;\n}\n\n/**\n * Recursively a set the same value for all keys and arrays nested object, cloning\n * @param object\n * @param value\n * @param visited\n * @param response\n */\nexport function setNestedObjectValues<T>(\n  object: any,\n  value: any,\n  visited: any = new WeakMap(),\n  response: any = {}\n): T {\n  for (let k of Object.keys(object)) {\n    const val = object[k];\n    if (isObject(val)) {\n      if (!visited.get(val)) {\n        visited.set(val, true);\n        // In order to keep array values consistent for both dot path  and\n        // bracket syntax, we need to check if this is an array so that\n        // this will output  { friends: [true] } and not { friends: { \"0\": true } }\n        response[k] = Array.isArray(val) ? [] : {};\n        setNestedObjectValues(val, value, visited, response[k]);\n      }\n    } else {\n      response[k] = value;\n    }\n  }\n\n  return response;\n}\n","import * as React from 'react';\r\nimport isEqual from 'react-fast-compare';\r\nimport deepmerge from 'deepmerge';\r\nimport { FormikProvider } from './connect';\r\nimport warning from 'tiny-warning';\r\nimport {\r\n  FormikActions,\r\n  FormikConfig,\r\n  FormikErrors,\r\n  FormikState,\r\n  FormikTouched,\r\n  FormikValues,\r\n  FormikProps,\r\n} from './types';\r\nimport {\r\n  isEmptyChildren,\r\n  isFunction,\r\n  isNaN,\r\n  isPromise,\r\n  isString,\r\n  isInputEvent,\r\n  setIn,\r\n  setNestedObjectValues,\r\n  getActiveElement,\r\n  getIn,\r\n  makeCancelable,\r\n} from './utils';\r\n\r\nexport class Formik<Values = FormikValues> extends React.Component<\r\n  FormikConfig<Values>,\r\n  FormikState<Values>\r\n> {\r\n  static defaultProps = {\r\n    validateOnChange: true,\r\n    validateOnBlur: true,\r\n    isInitialValid: false,\r\n    enableReinitialize: false,\r\n  };\r\n\r\n  initialValues: Values;\r\n  didMount: boolean;\r\n  hcCache: {\r\n    [key: string]: (e: unknown | React.ChangeEvent<any>) => void;\r\n  } = {};\r\n  hbCache: {\r\n    [key: string]: (e: any) => void;\r\n  } = {};\r\n  fields: {\r\n    [field: string]: React.Component<any>;\r\n  };\r\n  validator: any;\r\n\r\n  constructor(props: FormikConfig<Values>) {\r\n    super(props);\r\n    this.state = {\r\n      values: props.initialValues || ({} as any),\r\n      errors: {},\r\n      touched: {},\r\n      isSubmitting: false,\r\n      isValidating: false,\r\n      submitCount: 0,\r\n      status: props.initialStatus,\r\n    };\r\n    this.didMount = false;\r\n    this.fields = {};\r\n    this.initialValues = props.initialValues || ({} as any);\r\n    warning(\r\n      !(props.component && props.render),\r\n      'You should not use <Formik component> and <Formik render> in the same <Formik> component; <Formik render> will be ignored'\r\n    );\r\n\r\n    warning(\r\n      !(props.component && props.children && !isEmptyChildren(props.children)),\r\n      'You should not use <Formik component> and <Formik children> in the same <Formik> component; <Formik children> will be ignored'\r\n    );\r\n\r\n    warning(\r\n      !(props.render && props.children && !isEmptyChildren(props.children)),\r\n      'You should not use <Formik render> and <Formik children> in the same <Formik> component; <Formik children> will be ignored'\r\n    );\r\n  }\r\n\r\n  registerField = (name: string, Comp: React.Component<any>) => {\r\n    this.fields[name] = Comp;\r\n  };\r\n\r\n  unregisterField = (name: string) => {\r\n    delete this.fields[name];\r\n  };\r\n\r\n  componentDidMount() {\r\n    this.didMount = true;\r\n  }\r\n\r\n  componentWillUnmount() {\r\n    // This allows us to prevent setting state on an\r\n    // unmounted component. This can occur if Formik is in a modal, and submission\r\n    // toggles show/hide, and validation of a blur field takes longer than validation\r\n    // before a submit.\r\n    // @see https://github.com/jaredpalmer/formik/issues/597\r\n    // @see https://reactjs.org/blog/2015/12/16/ismounted-antipattern.html\r\n    this.didMount = false;\r\n\r\n    // Cancel validation on unmount.\r\n    if (this.validator) {\r\n      this.validator();\r\n    }\r\n  }\r\n\r\n  componentDidUpdate(prevProps: Readonly<FormikConfig<Values>>) {\r\n    // If the initialValues change, reset the form\r\n    if (\r\n      this.props.enableReinitialize &&\r\n      !isEqual(prevProps.initialValues, this.props.initialValues)\r\n    ) {\r\n      this.initialValues = this.props.initialValues;\r\n      // @todo refactor to use getDerivedStateFromProps?\r\n      this.resetForm(this.props.initialValues);\r\n    }\r\n  }\r\n\r\n  setErrors = (errors: FormikErrors<Values>) => {\r\n    this.setState({ errors });\r\n  };\r\n\r\n  setTouched = (touched: FormikTouched<Values>) => {\r\n    this.setState({ touched }, () => {\r\n      if (this.props.validateOnBlur) {\r\n        this.runValidations(this.state.values);\r\n      }\r\n    });\r\n  };\r\n\r\n  setValues = (values: FormikState<Values>['values']) => {\r\n    this.setState({ values }, () => {\r\n      if (this.props.validateOnChange) {\r\n        this.runValidations(values);\r\n      }\r\n    });\r\n  };\r\n\r\n  setStatus = (status?: any) => {\r\n    this.setState({ status });\r\n  };\r\n\r\n  setError = (error: any) => {\r\n    if (process.env.NODE_ENV !== 'production') {\r\n      console.warn(\r\n        `Warning: Formik\\'s setError(error) is deprecated and may be removed in future releases. Please use Formik\\'s setStatus(status) instead. It works identically. For more info see https://github.com/jaredpalmer/formik#setstatus-status-any--void`\r\n      );\r\n    }\r\n    this.setState({ error });\r\n  };\r\n\r\n  setSubmitting = (isSubmitting: boolean) => {\r\n    if (this.didMount) {\r\n      this.setState({ isSubmitting });\r\n    }\r\n  };\r\n\r\n  /**\r\n   * Run field level validation\r\n   */\r\n  validateField = (field: string): Promise<Object> => {\r\n    this.setState({ isValidating: true });\r\n    return this.runSingleFieldLevelValidation(\r\n      field,\r\n      getIn(this.state.values, field)\r\n    ).then(error => {\r\n      if (this.didMount) {\r\n        this.setState({\r\n          errors: setIn(this.state.errors, field, error),\r\n          isValidating: false,\r\n        });\r\n      }\r\n      return error;\r\n    });\r\n  };\r\n\r\n  runSingleFieldLevelValidation = (\r\n    field: string,\r\n    value: void | string\r\n  ): Promise<string> => {\r\n    return new Promise(resolve =>\r\n      resolve(this.fields[field].props.validate(value))\r\n    ).then(x => x, e => e);\r\n  };\r\n\r\n  runFieldLevelValidations(\r\n      values: FormikValues,\r\n      fieldId?: string\r\n  ): Promise<FormikErrors<Values>> {\r\n      let fieldKeysWithValidation: string[] = [];\r\n\r\n      if (!fieldId) {\r\n          fieldKeysWithValidation = Object.keys(this.fields).filter(\r\n              f =>\r\n                  this.fields &&\r\n                  this.fields[f] &&\r\n                  this.fields[f].props.validate &&\r\n                  isFunction(this.fields[f].props.validate)\r\n          );\r\n      }\r\n      else if (this.fields && this.fields[fieldId] && this.fields[fieldId].props.validate\r\n          && isFunction(this.fields[fieldId].props.validate)) {\r\n\r\n            fieldKeysWithValidation = [fieldId];\r\n      }\r\n\r\n    // Construct an array with all of the field validation functions\r\n    const fieldValidations: Promise<string>[] =\r\n      fieldKeysWithValidation.length > 0\r\n        ? fieldKeysWithValidation.map(f =>\r\n            this.runSingleFieldLevelValidation(f, getIn(values, f))\r\n          )\r\n        : [Promise.resolve('DO_NOT_DELETE_YOU_WILL_BE_FIRED')]; // use special case ;)\r\n\r\n    return Promise.all(fieldValidations).then((fieldErrorsList: string[]) =>\r\n      fieldErrorsList.reduce(\r\n        (prev, curr, index) => {\r\n          if (curr === 'DO_NOT_DELETE_YOU_WILL_BE_FIRED') {\r\n            return prev;\r\n          }\r\n          if (!!curr) {\r\n            prev = setIn(prev, fieldKeysWithValidation[index], curr);\r\n          }\r\n          return prev;\r\n        },\r\n        {} as FormikErrors<Values>\r\n      )\r\n    );\r\n  }\r\n\r\n  runValidateHandler(values: FormikValues): Promise<FormikErrors<Values>> {\r\n    return new Promise(resolve => {\r\n      const maybePromisedErrors = (this.props.validate as any)(values);\r\n      if (maybePromisedErrors === undefined) {\r\n        resolve({});\r\n      } else if (isPromise(maybePromisedErrors)) {\r\n        (maybePromisedErrors as Promise<any>).then(\r\n          () => {\r\n            resolve({});\r\n          },\r\n          errors => {\r\n            resolve(errors);\r\n          }\r\n        );\r\n      } else {\r\n        resolve(maybePromisedErrors);\r\n      }\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Run validation against a Yup schema and optionally run a function if successful\r\n   */\r\n  runValidationSchema = (values: FormikValues) => {\r\n    return new Promise(resolve => {\r\n      const { validationSchema } = this.props;\r\n      const schema = isFunction(validationSchema)\r\n        ? validationSchema()\r\n        : validationSchema;\r\n      validateYupSchema(values, schema).then(\r\n        () => {\r\n          resolve({});\r\n        },\r\n        (err: any) => {\r\n          resolve(yupToFormErrors(err));\r\n        }\r\n      );\r\n    });\r\n  };\r\n\r\n  /**\r\n   * Run all validations methods and update state accordingly\r\n   */\r\n  runValidations = (\r\n      values: FormikValues = this.state.values,\r\n      fieldId?: string\r\n  ): Promise<FormikErrors<Values>> => {\r\n    if (this.validator) {\r\n      this.validator();\r\n    }\r\n\r\n    const [promise, cancel] = makeCancelable(\r\n      Promise.all([\r\n        this.runFieldLevelValidations(values, fieldId),\r\n        this.props.validationSchema ? this.runValidationSchema(values) : {},\r\n        this.props.validate ? this.runValidateHandler(values) : {},\r\n      ]).then(([fieldErrors, schemaErrors, handlerErrors]) => {\r\n        return deepmerge.all<FormikErrors<Values>>(\r\n          [fieldErrors, schemaErrors, handlerErrors],\r\n          { arrayMerge }\r\n        );\r\n      })\r\n    );\r\n    this.validator = cancel;\r\n    return promise\r\n      .then((errors: FormikErrors<Values>) => {\r\n        if (this.didMount) {\r\n          this.setState(prevState => {\r\n              if (!isEqual(prevState.errors, errors)) {\r\n                  if (fieldId && !Object.prototype.hasOwnProperty.call(errors, fieldId)) {\r\n                      const errors = Object.keys(prevState.errors).reduce((newObj: any, key) => {\r\n                          if (key !== fieldId) {\r\n                              newObj[key] = (prevState.errors as any)[key];\r\n                          }\r\n\r\n                          return newObj\r\n                      }, {});\r\n\r\n                      return {\r\n                          errors: errors\r\n                      }\r\n                  } else {\r\n                      return {\r\n                          errors: Object.assign({}, prevState.errors, errors)\r\n                      };\r\n                  }\r\n              }\r\n              return null; // abort the update\r\n          });\r\n        }\r\n        return errors;\r\n      })\r\n      .catch(x => x);\r\n  };\r\n\r\n  handleChange = (\r\n    eventOrPath: string | React.ChangeEvent<any>\r\n  ): void | ((eventOrValue: unknown | React.ChangeEvent<any>) => void) => {\r\n    // this function actually handles the change\r\n    const executeChange = (\r\n      eventOrValue: unknown | React.ChangeEvent<any>,\r\n      maybePath?: string\r\n    ) => {\r\n      // To allow using handleChange with React Native (Web) or other UI libraries, we\r\n      // allow for the first argument to be either a value or the standard change event.\r\n      let field = maybePath;\r\n        let value: unknown;\r\n\r\n      if (isInputEvent(eventOrValue)) {\r\n        const event = eventOrValue as React.ChangeEvent<any>;\r\n        // If we can, persist the event, https://reactjs.org/docs/events.html#event-pooling\r\n        if (event.persist) {\r\n          event.persist();\r\n        }\r\n        const { type, name, id, checked, outerHTML } = event.target;\r\n        field = maybePath ? maybePath : name ? name : id;\r\n        if (!field && process.env.NODE_ENV !== 'production') {\r\n          warnAboutMissingIdentifier({\r\n            htmlContent: outerHTML,\r\n            documentationAnchorLink: 'handlechange-e-reactchangeeventany--void',\r\n            handlerName: 'handleChange',\r\n          });\r\n        }\r\n        value = event.target.value;\r\n        if (/number|range/.test(type)) {\r\n          const parsed = parseFloat(event.target.value);\r\n          value = isNaN(parsed) ? '' : parsed;\r\n        }\r\n        if (/checkbox/.test(type)) {\r\n          value = checked;\r\n        }\r\n      } else {\r\n        value = eventOrValue;\r\n      }\r\n\r\n        if (field) {        \r\n            // Set form fields by name\r\n            this.setState(prevState => ({\r\n                ...prevState,\r\n                values: setIn(prevState.values, field!, value)\r\n            }),\r\n            () => {\r\n                if (this.props.validateOnChange) {\r\n                    this.runValidations(setIn(this.state.values, field!, value), field!);\r\n                }\r\n            });\r\n        }\r\n    };\r\n\r\n    // Actually execute logic above....\r\n    if (isString(eventOrPath)) {\r\n      const path = eventOrPath;\r\n      // cache these handlers by key like Preact's linkState does for perf boost\r\n      if (!isFunction(this.hcCache[path])) {\r\n        // set a new handle function in cache\r\n        this.hcCache[path] = (eventOrValue: unknown | React.ChangeEvent<any>) =>\r\n          executeChange(eventOrValue, path);\r\n      }\r\n      return this.hcCache[path]; // return the cached function\r\n    } else {\r\n      const event = eventOrPath;\r\n      executeChange(event);\r\n    }\r\n  };\r\n\r\n  setFieldValue = (\r\n    field: string,\r\n    value: any,\r\n    shouldValidate: boolean = true\r\n  ) => {\r\n    if (this.didMount) {\r\n      // Set form field by name\r\n      this.setState(\r\n        prevState => ({\r\n          ...prevState,\r\n          values: setIn(prevState.values, field, value),\r\n        }),\r\n        () => {\r\n          if (this.props.validateOnChange && shouldValidate) {\r\n            this.runValidations(this.state.values, field);\r\n          }\r\n        }\r\n      );\r\n    }\r\n  };\r\n    setAllProperties = (values: any, errors: any, touched: any) => {\r\n        if (this.didMount) {\r\n            this.setState(prevState => ({\r\n                values: { ...prevState.values, ...values },\r\n                errors: { ...prevState.errors, ...errors },\r\n                touched: { ...prevState.touched, ...touched }\r\n            }));\r\n        }\r\n    }\r\n\r\n  handleSubmit = (e: React.FormEvent<HTMLFormElement> | undefined) => {\r\n    if (e && e.preventDefault) {\r\n      e.preventDefault();\r\n    }\r\n\r\n    // Warn if form submission is triggered by a <button> without a\r\n    // specified `type` attribute during development. This mitigates\r\n    // a common gotcha in forms with both reset and submit buttons,\r\n    // where the dev forgets to add type=\"button\" to the reset button.\r\n    if (\r\n      process.env.NODE_ENV !== 'production' &&\r\n      typeof document !== 'undefined'\r\n    ) {\r\n      // Safely get the active element (works with IE)\r\n      const activeElement = getActiveElement();\r\n      if (\r\n        activeElement !== null &&\r\n        activeElement instanceof HTMLButtonElement\r\n      ) {\r\n        warning(\r\n          !!(\r\n            activeElement.attributes &&\r\n            activeElement.attributes.getNamedItem('type')\r\n          ),\r\n          'You submitted a Formik form using a button with an unspecified `type` attribute.  Most browsers default button elements to `type=\"submit\"`. If this is not a submit button, please add `type=\"button\"`.'\r\n        );\r\n      }\r\n    }\r\n\r\n    this.submitForm();\r\n  };\r\n\r\n    //Modificado WIS:\r\n\r\n  submitForm = () => {\r\n      if (this.props.validateOnSubmit) {\r\n          this.submitFormWithValidation();\r\n      }\r\n      else {\r\n          this.submitFormWithoutValidation();\r\n      }\r\n  };\r\n\r\n    submitFormWithoutValidation = () => {\r\n        // Recursively set all values to `true`.\r\n        this.setState(prevState => ({\r\n            isSubmitting: true,\r\n            submitCount: prevState.submitCount + 1,\r\n        }));\r\n\r\n        return new Promise((resolve) => {\r\n            this.executeSubmit();\r\n            resolve();\r\n        });\r\n    }\r\n\r\n    submitFormWithValidation = () => {\r\n        // Recursively set all values to `true`.\r\n        this.setState(prevState => ({\r\n            touched: setNestedObjectValues<FormikTouched<Values>>(\r\n                prevState.values,\r\n                true\r\n            ),\r\n            isSubmitting: true,\r\n            isValidating: true,\r\n            submitCount: prevState.submitCount + 1,\r\n        }));\r\n\r\n        return this.runValidations(this.state.values).then(combinedErrors => {\r\n            if (this.didMount) {\r\n                this.setState({ isValidating: false });\r\n            }\r\n            const isValid = Object.keys(combinedErrors).length === 0;\r\n            if (isValid) {\r\n                this.executeSubmit();\r\n            } else if (this.didMount) {\r\n                // ^^^ Make sure Formik is still mounted before calling setState\r\n                this.setState({ isSubmitting: false });\r\n            }\r\n        });\r\n    }\r\n\r\n    //Fin modificacion WIS\r\n\r\n  executeSubmit = () => {\r\n    this.props.onSubmit(this.state.values, this.getFormikActions());\r\n  };\r\n\r\n  handleBlur = (\r\n    eventOrPath: string | React.FocusEvent<any>\r\n  ): void | ((e?: React.FocusEvent<any>) => void) => {\r\n    const executeBlur = (\r\n      maybeEvent?: React.FocusEvent<any>,\r\n      maybePath?: string\r\n    ) => {\r\n      let field = maybePath;\r\n      if (isInputEvent(maybeEvent)) {\r\n        const event = maybeEvent as React.FocusEvent<any>;\r\n        // If we can, persist the event, https://reactjs.org/docs/events.html#event-pooling\r\n        if (event.persist) {\r\n          event.persist();\r\n        }\r\n        const { name, id, outerHTML } = event.target;\r\n        field = name ? name : id;\r\n        if (!field && process.env.NODE_ENV !== 'production') {\r\n          warnAboutMissingIdentifier({\r\n            htmlContent: outerHTML,\r\n            documentationAnchorLink: 'handleblur-e-reactfocuseventany--void',\r\n            handlerName: 'handleBlur',\r\n          });\r\n        }\r\n      }\r\n\r\n      this.setState(prevState => ({\r\n        touched: setIn(prevState.touched, field!, true),\r\n      }));\r\n\r\n      if (this.props.validateOnBlur) {\r\n        this.runValidations(this.state.values, field!);\r\n      }\r\n    };\r\n    if (isString(eventOrPath)) {\r\n      const path = eventOrPath;\r\n      // cache these handlers by key like Preact's linkState does for perf boost\r\n      if (!isFunction(this.hbCache[path])) {\r\n        // set a new handle function in cache\r\n        this.hbCache[path] = (event?: React.FocusEvent<any>) =>\r\n          executeBlur(event, path);\r\n      }\r\n      return this.hbCache[path]; // return the cached function\r\n    } else {\r\n      const event = eventOrPath;\r\n      executeBlur(event);\r\n    }\r\n  };\r\n\r\n  setFieldTouched = (\r\n    field: string,\r\n    touched: boolean = true,\r\n    shouldValidate: boolean = true\r\n  ) => {\r\n    // Set touched field by name\r\n    this.setState(\r\n      prevState => ({\r\n        ...prevState,\r\n        touched: setIn(prevState.touched, field, touched),\r\n      }),\r\n      () => {\r\n        if (this.props.validateOnBlur && shouldValidate) {\r\n          this.runValidations(this.state.values, field);\r\n        }\r\n      }\r\n    );\r\n  };\r\n\r\n  setFieldError = (field: string, message: string | undefined) => {\r\n    // Set form field by name\r\n    this.setState(prevState => ({\r\n      ...prevState,\r\n      errors: setIn(prevState.errors, field, message),\r\n    }));\r\n    };\r\n\r\n    setFieldPristine = (field: string) => {\r\n        this.setState(\r\n            prevState => ({\r\n                ...prevState,\r\n                touched: setIn(prevState.touched, field, undefined)\r\n            })\r\n        );\r\n    };\r\n\r\n    resetForm = (nextValues?: Values, postUpdate?: (() => void)) => {\r\n        const values = nextValues ? nextValues : this.props.initialValues;\r\n\r\n        this.initialValues = values;\r\n\r\n        if (!postUpdate)\r\n            postUpdate = () => {};\r\n\r\n        this.setState({\r\n          isSubmitting: false,\r\n          isValidating: false,\r\n          errors: {},\r\n          touched: {},\r\n          error: undefined,\r\n          status: this.props.initialStatus,\r\n          values,\r\n            submitCount: 0,\r\n        }, postUpdate);\r\n      };\r\n\r\n  handleReset = () => {\r\n    if (this.props.onReset) {\r\n      const maybePromisedOnReset = (this.props.onReset as any)(\r\n        this.state.values,\r\n        this.getFormikActions()\r\n      );\r\n\r\n      if (isPromise(maybePromisedOnReset)) {\r\n        (maybePromisedOnReset as Promise<any>).then(this.resetForm);\r\n      } else {\r\n        this.resetForm();\r\n      }\r\n    } else {\r\n      this.resetForm();\r\n    }\r\n  };\r\n\r\n  setFormikState = (s: any, callback?: (() => void)) =>\r\n    this.setState(s, callback);\r\n\r\n  validateForm = (values: Values) => {\r\n    this.setState({ isValidating: true });\r\n    return this.runValidations(values).then(errors => {\r\n      if (this.didMount) {\r\n        this.setState({ isValidating: false });\r\n      }\r\n      return errors;\r\n    });\r\n  };\r\n\r\n  getFormikActions = (): FormikActions<Values> => {\r\n    return {\r\n      resetForm: this.resetForm,\r\n      submitForm: this.submitForm,\r\n      validateForm: this.validateForm,\r\n      validateField: this.validateField,\r\n      setError: this.setError,\r\n      setErrors: this.setErrors,\r\n      setFieldError: this.setFieldError,\r\n      setFieldTouched: this.setFieldTouched,\r\n      setFieldValue: this.setFieldValue,\r\n      setStatus: this.setStatus,\r\n      setSubmitting: this.setSubmitting,\r\n      setTouched: this.setTouched,\r\n      setValues: this.setValues,\r\n      setFormikState: this.setFormikState,\r\n      setAllProperties: this.setAllProperties\r\n    };\r\n  };\r\n\r\n  getFormikComputedProps = () => {\r\n    const { isInitialValid } = this.props;\r\n    const dirty = !isEqual(this.initialValues, this.state.values);\r\n    return {\r\n      dirty,\r\n      isValid: dirty\r\n        ? this.state.errors && Object.keys(this.state.errors).length === 0\r\n        : isInitialValid !== false && isFunction(isInitialValid)\r\n          ? (isInitialValid as (props: this['props']) => boolean)(this.props)\r\n          : (isInitialValid as boolean),\r\n      initialValues: this.initialValues,\r\n    };\r\n  };\r\n\r\n  getFormikBag = () => {\r\n    return {\r\n      ...this.state,\r\n      ...this.getFormikActions(),\r\n      ...this.getFormikComputedProps(),\r\n      // Field needs to communicate with Formik during resets\r\n      registerField: this.registerField,\r\n      unregisterField: this.unregisterField,\r\n      handleBlur: this.handleBlur,\r\n      handleChange: this.handleChange,\r\n      handleReset: this.handleReset,\r\n      handleSubmit: this.handleSubmit,\r\n      validateOnChange: this.props.validateOnChange,\r\n      validateOnBlur: this.props.validateOnBlur,\r\n      setAllProperties: this.setAllProperties\r\n    };\r\n  };\r\n\r\n  getFormikContext = () => {\r\n    return {\r\n      ...this.getFormikBag(),\r\n      validationSchema: this.props.validationSchema,\r\n      validate: this.props.validate,\r\n      initialValues: this.initialValues,\r\n    };\r\n  };\r\n\r\n  render() {\r\n    const { component, render, children } = this.props;\r\n    const props = this.getFormikBag();\r\n    const ctx = this.getFormikContext();\r\n    return (\r\n      <FormikProvider value={ctx}>\r\n        {component\r\n          ? React.createElement(component as any, props)\r\n          : render\r\n            ? render(props)\r\n            : children // children come last, always called\r\n              ? isFunction(children)\r\n                ? (children as ((\r\n                    props: FormikProps<Values>\r\n                  ) => React.ReactNode))(props as FormikProps<Values>)\r\n                : !isEmptyChildren(children)\r\n                  ? React.Children.only(children)\r\n                  : null\r\n              : null}\r\n      </FormikProvider>\r\n    );\r\n  }\r\n}\r\n\r\nfunction warnAboutMissingIdentifier({\r\n  htmlContent,\r\n  documentationAnchorLink,\r\n  handlerName,\r\n}: {\r\n  htmlContent: string;\r\n  documentationAnchorLink: string;\r\n  handlerName: string;\r\n}) {\r\n  console.warn(\r\n    `Warning: Formik called \\`${handlerName}\\`, but you forgot to pass an \\`id\\` or \\`name\\` attribute to your input:\r\n\r\n    ${htmlContent}\r\n\r\n    Formik cannot determine which value to update. For more info see https://github.com/jaredpalmer/formik#${documentationAnchorLink}\r\n  `\r\n  );\r\n}\r\n\r\n/**\r\n * Transform Yup ValidationError to a more usable object\r\n */\r\nexport function yupToFormErrors<Values>(yupError: any): FormikErrors<Values> {\r\n  let errors: any = {} as FormikErrors<Values>;\r\n  if (yupError.inner.length === 0) {\r\n    return setIn(errors, yupError.path, yupError.message);\r\n  }\r\n  for (let err of yupError.inner) {\r\n    if (!errors[err.path]) {\r\n      errors = setIn(errors, err.path, err.message);\r\n    }\r\n  }\r\n  return errors;\r\n}\r\n\r\n/**\r\n * Validate a yup schema.\r\n */\r\nexport function validateYupSchema<T extends FormikValues>(\r\n  values: T,\r\n  schema: any,\r\n  sync: boolean = false,\r\n  context: any = {}\r\n): Promise<Partial<T>> {\r\n  let validateData: Partial<T> = {};\r\n  for (let k in values) {\r\n    if (values.hasOwnProperty(k)) {\r\n      const key = String(k);\r\n      validateData[key] = values[key] !== '' ? values[key] : undefined;\r\n    }\r\n  }\r\n  return schema[sync ? 'validateSync' : 'validate'](validateData, {\r\n    abortEarly: false,\r\n    context: context,\r\n  });\r\n}\r\n\r\n/**\r\n * deepmerge array merging algorithm\r\n * https://github.com/KyleAMathews/deepmerge#combine-array\r\n */\r\nfunction arrayMerge(target: any[], source: any[], options: any): any[] {\r\n  const destination = target.slice();\r\n\r\n  source.forEach(function(e: any, i: number) {\r\n    if (typeof destination[i] === 'undefined') {\r\n      const cloneRequested = options.clone !== false;\r\n      const shouldClone = cloneRequested && options.isMergeableObject(e);\r\n      destination[i] = shouldClone\r\n        ? deepmerge(Array.isArray(e) ? [] : {}, e, options)\r\n        : e;\r\n    } else if (options.isMergeableObject(e)) {\r\n      destination[i] = deepmerge(target[i], e, options);\r\n    } else if (target.indexOf(e) === -1) {\r\n      destination.push(e);\r\n    }\r\n  });\r\n  return destination;\r\n}\r\n","import * as React from 'react';\n\nimport { connect } from './connect';\nimport {\n  FormikProps,\n  GenericFieldHTMLAttributes,\n  FormikContext,\n  FormikHandlers,\n} from './types';\nimport warning from 'tiny-warning';\nimport { getIn, isEmptyChildren, isFunction } from './utils';\n\n/**\n * Note: These typings could be more restrictive, but then it would limit the\n * reusability of custom <Field/> components.\n *\n * @example\n * interface MyProps {\n *   ...\n * }\n *\n * export const MyInput: React.SFC<MyProps & FieldProps> = ({\n *   field,\n *   form,\n *   ...props\n * }) =>\n *   <div>\n *     <input {...field} {...props}/>\n *     {form.touched[field.name] && form.errors[field.name]}\n *   </div>\n */\nexport interface FieldProps<V = any> {\n  field: {\n    /** Classic React change handler, keyed by input name */\n    onChange: FormikHandlers['handleChange'];\n    /** Mark input as touched */\n    onBlur: FormikHandlers['handleBlur'];\n    /** Value of the input */\n    value: any;\n    /* name of the input */\n    name: string;\n  };\n  form: FormikProps<V>; // if ppl want to restrict this for a given form, let them.\n}\n\nexport interface FieldConfig {\n  /**\n   * Field component to render. Can either be a string like 'select' or a component.\n   */\n  component?:\n    | string\n    | React.ComponentType<FieldProps<any>>\n    | React.ComponentType<void>;\n\n  /**\n   * Render prop (works like React router's <Route render={props =>} />)\n   */\n  render?: ((props: FieldProps<any>) => React.ReactNode);\n\n  /**\n   * Children render function <Field name>{props => ...}</Field>)\n   */\n  children?: ((props: FieldProps<any>) => React.ReactNode) | React.ReactNode;\n\n  /**\n   * Validate a single field value independently\n   */\n  validate?: ((value: any) => string | Promise<void> | undefined);\n\n  /**\n   * Field name\n   */\n  name: string;\n\n  /** HTML input type */\n  type?: string;\n\n  /** Field value */\n  value?: any;\n\n  /** Inner ref */\n  innerRef?: (instance: any) => void;\n}\n\nexport type FieldAttributes<T> = GenericFieldHTMLAttributes & FieldConfig & T;\n\n/**\n * Custom Field component for quickly hooking into Formik\n * context and wiring up forms.\n */\nclass FieldInner<Values = {}, Props = {}> extends React.Component<\n  FieldAttributes<Props> & { formik: FormikContext<Values> },\n  {}\n> {\n  constructor(\n    props: FieldAttributes<Props> & { formik: FormikContext<Values> }\n  ) {\n    super(props);\n    const { render, children, component } = props;\n    warning(\n      !(component && render),\n      'You should not use <Field component> and <Field render> in the same <Field> component; <Field component> will be ignored'\n    );\n\n    warning(\n      !(component && children && isFunction(children)),\n      'You should not use <Field component> and <Field children> as a function in the same <Field> component; <Field component> will be ignored.'\n    );\n\n    warning(\n      !(render && children && !isEmptyChildren(children)),\n      'You should not use <Field render> and <Field children> in the same <Field> component; <Field children> will be ignored'\n    );\n  }\n\n  componentDidMount() {\n    // Register the Field with the parent Formik. Parent will cycle through\n    // registered Field's validate fns right prior to submit\n    this.props.formik.registerField(this.props.name, this);\n  }\n\n  componentDidUpdate(\n    prevProps: FieldAttributes<Props> & { formik: FormikContext<Values> }\n  ) {\n    if (this.props.name !== prevProps.name) {\n      this.props.formik.unregisterField(prevProps.name);\n      this.props.formik.registerField(this.props.name, this);\n    }\n\n    if (this.props.validate !== prevProps.validate) {\n      this.props.formik.registerField(this.props.name, this);\n    }\n  }\n\n  componentWillUnmount() {\n    this.props.formik.unregisterField(this.props.name);\n  }\n\n  render() {\n    const {\n      validate,\n      name,\n      render,\n      children,\n      component = 'input',\n      formik,\n      ...props\n    } = (this.props as FieldAttributes<Props> & {\n      formik: FormikContext<Values>;\n    }) as any;\n    const {\n      validate: _validate,\n      validationSchema: _validationSchema,\n      ...restOfFormik\n    } = formik;\n    const field = {\n      value:\n        props.type === 'radio' || props.type === 'checkbox'\n          ? props.value // React uses checked={} for these inputs\n          : getIn(formik.values, name),\n      name,\n      onChange: formik.handleChange,\n      onBlur: formik.handleBlur,\n    };\n    const bag = { field, form: restOfFormik };\n\n    if (render) {\n      return (render as any)(bag);\n    }\n\n    if (isFunction(children)) {\n      return (children as (props: FieldProps<any>) => React.ReactNode)(bag);\n    }\n\n    if (typeof component === 'string') {\n      const { innerRef, ...rest } = props;\n      return React.createElement(component as any, {\n        ref: innerRef,\n        ...field,\n        ...rest,\n        children,\n      });\n    }\n\n    return React.createElement(component as any, {\n      ...bag,\n      ...props,\n      children,\n    });\n  }\n}\n\nexport const Field = connect<FieldAttributes<any>, any>(FieldInner);\n","import * as React from 'react';\nimport { connect } from './connect';\n\nexport type FormikFormProps = Pick<\n  React.FormHTMLAttributes<HTMLFormElement>,\n  Exclude<\n    keyof React.FormHTMLAttributes<HTMLFormElement>,\n    'onReset' | 'onSubmit'\n  >\n>;\n\nexport const Form = connect<FormikFormProps>(\n  ({ formik: { handleReset, handleSubmit }, ...props }) => (\n    <form onReset={handleReset} onSubmit={handleSubmit} {...props} />\n  )\n);\n\nForm.displayName = 'Form';\n","import * as React from 'react';\nimport cloneDeep from 'lodash/cloneDeep';\nimport { connect } from './connect';\nimport {\n  FormikContext,\n  FormikState,\n  SharedRenderProps,\n  FormikProps,\n} from './types';\nimport { getIn, isEmptyChildren, isFunction, setIn } from './utils';\n\nexport type FieldArrayRenderProps = ArrayHelpers & {\n  form: FormikProps<any>;\n  name: string;\n};\n\nexport type FieldArrayConfig = {\n  /** Really the path to the array field to be updated */\n  name: string;\n  /** Should field array validate the form AFTER array updates/changes? */\n  validateOnChange?: boolean;\n} & SharedRenderProps<FieldArrayRenderProps>;\nexport interface ArrayHelpers {\n  /** Imperatively add a value to the end of an array */\n  push: (obj: any) => void;\n  /** Curried fn to add a value to the end of an array */\n  handlePush: (obj: any) => () => void;\n  /** Imperatively swap two values in an array */\n  swap: (indexA: number, indexB: number) => void;\n  /** Curried fn to swap two values in an array */\n  handleSwap: (indexA: number, indexB: number) => () => void;\n  /** Imperatively move an element in an array to another index */\n  move: (from: number, to: number) => void;\n  /** Imperatively move an element in an array to another index */\n  handleMove: (from: number, to: number) => () => void;\n  /** Imperatively insert an element at a given index into the array */\n  insert: (index: number, value: any) => void;\n  /** Curried fn to insert an element at a given index into the array */\n  handleInsert: (index: number, value: any) => () => void;\n  /** Imperatively replace a value at an index of an array  */\n  replace: (index: number, value: any) => void;\n  /** Curried fn to replace an element at a given index into the array */\n  handleReplace: (index: number, value: any) => () => void;\n  /** Imperatively add an element to the beginning of an array and return its length */\n  unshift: (value: any) => number;\n  /** Curried fn to add an element to the beginning of an array */\n  handleUnshift: (value: any) => () => void;\n  /** Curried fn to remove an element at an index of an array */\n  handleRemove: (index: number) => () => void;\n  /** Curried fn to remove a value from the end of the array */\n  handlePop: () => () => void;\n  /** Imperatively remove and element at an index of an array */\n  remove<T>(index: number): T | undefined;\n  /** Imperatively remove and return value from the end of the array */\n  pop<T>(): T | undefined;\n}\n\n/**\n * Some array helpers!\n */\nexport const move = (array: any[], from: number, to: number) => {\n  const copy = [...(array || [])];\n  const value = copy[from];\n  copy.splice(from, 1);\n  copy.splice(to, 0, value);\n  return copy;\n};\n\nexport const swap = (array: any[], indexA: number, indexB: number) => {\n  const copy = [...(array || [])];\n  const a = copy[indexA];\n  copy[indexA] = copy[indexB];\n  copy[indexB] = a;\n  return copy;\n};\n\nexport const insert = (array: any[], index: number, value: any) => {\n  const copy = [...(array || [])];\n  copy.splice(index, 0, value);\n  return copy;\n};\n\nexport const replace = (array: any[], index: number, value: any) => {\n  const copy = [...(array || [])];\n  copy[index] = value;\n  return copy;\n};\nclass FieldArrayInner<Values = {}> extends React.Component<\n  FieldArrayConfig & { formik: FormikContext<Values> },\n  {}\n> {\n  static defaultProps = {\n    validateOnChange: true,\n  };\n\n  constructor(props: FieldArrayConfig & { formik: FormikContext<Values> }) {\n    super(props);\n    // We need TypeScript generics on these, so we'll bind them in the constructor\n    this.remove = this.remove.bind(this) as any;\n    this.pop = this.pop.bind(this) as any;\n  }\n\n  updateArrayField = (\n    fn: Function,\n    alterTouched: boolean | Function,\n    alterErrors: boolean | Function\n  ) => {\n    const {\n      name,\n      validateOnChange,\n      formik: { setFormikState, validateForm },\n    } = this.props;\n    setFormikState(\n      (prevState: FormikState<any>) => {\n        let updateErrors = typeof alterErrors === 'function' ? alterErrors : fn;\n        let updateTouched =\n          typeof alterTouched === 'function' ? alterTouched : fn;\n\n        return {\n          ...prevState,\n          values: setIn(\n            prevState.values,\n            name,\n            fn(getIn(prevState.values, name))\n          ),\n          errors: alterErrors\n            ? setIn(\n                prevState.errors,\n                name,\n                updateErrors(getIn(prevState.errors, name))\n              )\n            : prevState.errors,\n          touched: alterTouched\n            ? setIn(\n                prevState.touched,\n                name,\n                updateTouched(getIn(prevState.touched, name))\n              )\n            : prevState.touched,\n        };\n      },\n      () => {\n        if (validateOnChange) {\n          validateForm();\n        }\n      }\n    );\n  };\n\n  push = (value: any) =>\n    this.updateArrayField(\n      (array: any[]) => [...(array || []), cloneDeep(value)],\n      false,\n      false\n    );\n\n  handlePush = (value: any) => () => this.push(value);\n\n  swap = (indexA: number, indexB: number) =>\n    this.updateArrayField(\n      (array: any[]) => swap(array, indexA, indexB),\n      true,\n      true\n    );\n\n  handleSwap = (indexA: number, indexB: number) => () =>\n    this.swap(indexA, indexB);\n\n  move = (from: number, to: number) =>\n    this.updateArrayField((array: any[]) => move(array, from, to), true, true);\n\n  handleMove = (from: number, to: number) => () => this.move(from, to);\n\n  insert = (index: number, value: any) =>\n    this.updateArrayField(\n      (array: any[]) => insert(array, index, value),\n      (array: any[]) => insert(array, index, null),\n      (array: any[]) => insert(array, index, null)\n    );\n\n  handleInsert = (index: number, value: any) => () => this.insert(index, value);\n\n  replace = (index: number, value: any) =>\n    this.updateArrayField(\n      (array: any[]) => replace(array, index, value),\n      false,\n      false\n    );\n\n  handleReplace = (index: number, value: any) => () =>\n    this.replace(index, value);\n\n  unshift = (value: any) => {\n    let length = -1;\n    this.updateArrayField(\n      (array: any[]) => {\n        const arr = array ? [value, ...array] : [value];\n        if (length < 0) {\n          length = arr.length;\n        }\n        return arr;\n      },\n      (array: any[]) => {\n        const arr = array ? [null, ...array] : [null];\n        if (length < 0) length = arr.length;\n        return arr;\n      },\n      (array: any[]) => {\n        const arr = array ? [null, ...array] : [null];\n        if (length < 0) length = arr.length;\n        return arr;\n      }\n    );\n    return length;\n  };\n\n  handleUnshift = (value: any) => () => this.unshift(value);\n\n  remove<T>(index: number): T {\n    // We need to make sure we also remove relevant pieces of `touched` and `errors`\n    let result: any;\n    this.updateArrayField(\n      // so this gets call 3 times\n      (array?: any[]) => {\n        const copy = array ? [...array] : [];\n        if (!result) {\n          result = copy[index];\n        }\n        if (isFunction(copy.splice)) {\n          copy.splice(index, 1);\n        }\n        return copy;\n      },\n      true,\n      true\n    );\n\n    return result;\n  }\n\n  handleRemove = (index: number) => () => this.remove<any>(index);\n\n  pop<T>(): T {\n    // Remove relevant pieces of `touched` and `errors` too!\n    let result: any;\n    this.updateArrayField(\n      // so this gets call 3 times\n      (array: any[]) => {\n        const tmp = array;\n        if (!result) {\n          result = tmp && tmp.pop && tmp.pop();\n        }\n        return tmp;\n      },\n      true,\n      true\n    );\n\n    return result;\n  }\n\n  handlePop = () => () => this.pop<any>();\n\n  render() {\n    const arrayHelpers: ArrayHelpers = {\n      push: this.push,\n      pop: this.pop,\n      swap: this.swap,\n      move: this.move,\n      insert: this.insert,\n      replace: this.replace,\n      unshift: this.unshift,\n      remove: this.remove,\n      handlePush: this.handlePush,\n      handlePop: this.handlePop,\n      handleSwap: this.handleSwap,\n      handleMove: this.handleMove,\n      handleInsert: this.handleInsert,\n      handleReplace: this.handleReplace,\n      handleUnshift: this.handleUnshift,\n      handleRemove: this.handleRemove,\n    };\n\n    const {\n      component,\n      render,\n      children,\n      name,\n      formik: {\n        validate: _validate,\n        validationSchema: _validationSchema,\n        ...restOfFormik\n      },\n    } = this.props;\n\n    const props: FieldArrayRenderProps = {\n      ...arrayHelpers,\n      form: restOfFormik,\n      name,\n    };\n\n    return component\n      ? React.createElement(component as any, props)\n      : render\n        ? (render as any)(props)\n        : children // children come last, always called\n          ? typeof children === 'function'\n            ? (children as any)(props)\n            : !isEmptyChildren(children) ? React.Children.only(children) : null\n          : null;\n  }\n}\n\nexport const FieldArray = connect<FieldArrayConfig, any>(FieldArrayInner);\n","import * as React from 'react';\r\n\r\nimport { connect } from './connect';\r\nimport {\r\n  FormikProps,\r\n  GenericFieldHTMLAttributes,\r\n  FormikContext,\r\n} from './types';\r\nimport warning from 'tiny-warning';\r\nimport { getIn, isEmptyChildren, isFunction } from './utils';\r\n\r\nexport interface FastFieldProps<V = any> {\r\n  field: {\r\n    /** Classic React change handler, keyed by input name */\r\n    onChange: (e: React.ChangeEvent<any>) => void;\r\n    /** Mark input as touched */\r\n    onBlur: (e: any) => void;\r\n    /** Value of the input */\r\n    value: any;\r\n    /* name of the input */\r\n    name: string;\r\n  };\r\n  form: FormikProps<V>; // if ppl want to restrict this for a given form, let them.\r\n}\r\n\r\nexport interface FastFieldConfig<T> {\r\n  /**\r\n   * Field component to render. Can either be a string like 'select' or a component.\r\n   */\r\n  component?:\r\n    | string\r\n    | React.ComponentType<FastFieldProps<any>>\r\n    | React.ComponentType<void>;\r\n\r\n  /**\r\n   * Render prop (works like React router's <Route render={props =>} />)\r\n   */\r\n  render?: ((props: FastFieldProps<any>) => React.ReactNode);\r\n\r\n  /**\r\n   * Children render function <Field name>{props => ...}</Field>)\r\n   */\r\n  children?:\r\n    | ((props: FastFieldProps<any>) => React.ReactNode)\r\n    | React.ReactNode;\r\n\r\n  /**\r\n   * Validate a single field value independently\r\n   */\r\n  validate?: ((value: any) => string | Promise<void> | undefined);\r\n\r\n  /** Override FastField's default shouldComponentUpdate */\r\n  shouldUpdate?: (\r\n    nextProps: T & GenericFieldHTMLAttributes & { formik: FormikContext<any> },\r\n    props: {}\r\n  ) => boolean;\r\n\r\n  /**\r\n   * Field name\r\n   */\r\n  name: string;\r\n\r\n  /** HTML class */\r\n  className?: string;\r\n\r\n  /** HTML input type */\r\n  type?: string;\r\n\r\n  /** Field value */\r\n  value?: any;\r\n\r\n  /** Inner ref */\r\n  innerRef?: (instance: any) => void;\r\n}\r\n\r\nexport type FastFieldAttributes<T> = GenericFieldHTMLAttributes &\r\n  FastFieldConfig<T> &\r\n  T;\r\n\r\n/**\r\n * Custom Field component for quickly hooking into Formik\r\n * context and wiring up forms.\r\n */\r\nclass FastFieldInner<Values = {}, Props = {}> extends React.Component<\r\n  FastFieldAttributes<Props> & { formik: FormikContext<Values> },\r\n  {}\r\n> {\r\n  constructor(\r\n    props: FastFieldAttributes<Props> & { formik: FormikContext<Values> }\r\n  ) {\r\n    super(props);\r\n    const { render, children, component } = props;\r\n    warning(\r\n      !(component && render),\r\n      'You should not use <FastField component> and <FastField render> in the same <FastField> component; <FastField component> will be ignored'\r\n    );\r\n\r\n    warning(\r\n      !(component && children && isFunction(children)),\r\n      'You should not use <FastField component> and <FastField children> as a function in the same <FastField> component; <FastField component> will be ignored.'\r\n    );\r\n\r\n    warning(\r\n      !(render && children && !isEmptyChildren(children)),\r\n      'You should not use <FastField render> and <FastField children> in the same <FastField> component; <FastField children> will be ignored'\r\n    );\r\n  }\r\n\r\n  shouldComponentUpdate(\r\n    props: FastFieldAttributes<Props> & { formik: FormikContext<Values> }\r\n  ) {\r\n    if (this.props.shouldUpdate) {\r\n      return this.props.shouldUpdate(props, this.props);\r\n    } else if (\r\n      getIn(this.props.formik.values, this.props.name) !==\r\n        getIn(props.formik.values, this.props.name) ||\r\n      getIn(this.props.formik.errors, this.props.name) !==\r\n        getIn(props.formik.errors, this.props.name) ||\r\n      getIn(this.props.formik.touched, this.props.name) !==\r\n        getIn(props.formik.touched, this.props.name) ||\r\n      Object.keys(this.props).length !== Object.keys(props).length ||\r\n      this.props.formik.isSubmitting !== props.formik.isSubmitting\r\n    ) {\r\n      return true;\r\n    } else {\r\n      return false;\r\n    }\r\n  }\r\n\r\n  componentDidMount() {\r\n    // Register the Field with the parent Formik. Parent will cycle through\r\n    // registered Field's validate fns right prior to submit\r\n    this.props.formik.registerField(this.props.name, this);\r\n  }\r\n\r\n  componentDidUpdate(\r\n    prevProps: FastFieldAttributes<Props> & { formik: FormikContext<Values> }\r\n  ) {\r\n    if (this.props.name !== prevProps.name) {\r\n      this.props.formik.unregisterField(prevProps.name);\r\n      this.props.formik.registerField(this.props.name, this);\r\n    }\r\n\r\n    if (this.props.validate !== prevProps.validate) {\r\n      this.props.formik.registerField(this.props.name, this);\r\n    }\r\n  }\r\n\r\n  componentWillUnmount() {\r\n    this.props.formik.unregisterField(this.props.name);\r\n  }\r\n\r\n  render() {\r\n    const {\r\n      validate,\r\n      name,\r\n      render,\r\n      children,\r\n      component = 'input',\r\n      formik,\r\n      shouldUpdate,\r\n      ...props\r\n    } = (this.props as FastFieldAttributes<Props> & {\r\n      formik: FormikContext<Values>;\r\n    }) as any;\r\n    const {\r\n      validate: _validate,\r\n      validationSchema: _validationSchema,\r\n      ...restOfFormik\r\n    } = formik;\r\n    const field = {\r\n      value:\r\n        props.type === 'radio' || props.type === 'checkbox'\r\n          ? props.value // React uses checked={} for these inputs\r\n          : getIn(formik.values, name),\r\n      name,\r\n      onChange: formik.handleChange,\r\n      onBlur: formik.handleBlur,\r\n    };\r\n    const bag = { field, form: restOfFormik };\r\n\r\n    if (render) {\r\n      return (render as any)(bag);\r\n    }\r\n\r\n    if (isFunction(children)) {\r\n      return (children as (props: FastFieldProps<any>) => React.ReactNode)(bag);\r\n    }\r\n\r\n    if (typeof component === 'string') {\r\n      const { innerRef, ...rest } = props;\r\n      return React.createElement(component as any, {\r\n        ref: innerRef,\r\n        ...field,\r\n        ...rest,\r\n        children,\r\n      });\r\n    }\r\n\r\n    return React.createElement(component as any, {\r\n      ...bag,\r\n      ...props,\r\n      children,\r\n    });\r\n  }\r\n}\r\n\r\nexport const FastField = connect<FastFieldAttributes<any>, any>(FastFieldInner);\r\n","import * as React from 'react';\nimport { FormikContext } from './types';\nimport { getIn, isFunction } from './utils';\nimport { connect } from './connect';\n\nexport interface ErrorMessageProps {\n  name: string;\n  className?: string;\n  component?: string | React.ComponentType;\n  children?: ((errorMessage: string) => React.ReactNode);\n  render?: ((errorMessage: string) => React.ReactNode);\n}\n\nclass ErrorMessageImpl extends React.Component<\n  ErrorMessageProps & { formik: FormikContext<any> }\n> {\n  shouldComponentUpdate(\n    props: ErrorMessageProps & { formik: FormikContext<any> }\n  ) {\n    if (\n      getIn(this.props.formik.errors, this.props.name) !==\n        getIn(props.formik.errors, this.props.name) ||\n      getIn(this.props.formik.touched, this.props.name) !==\n        getIn(props.formik.touched, this.props.name) ||\n      Object.keys(this.props).length !== Object.keys(props).length\n    ) {\n      return true;\n    } else {\n      return false;\n    }\n  }\n\n  render() {\n    let { component, formik, render, children, name, ...rest } = this.props;\n\n    const touch = getIn(formik.touched, name);\n    const error = getIn(formik.errors, name);\n\n    return !!touch && !!error\n      ? render\n        ? isFunction(render) ? render(error) : null\n        : children\n          ? isFunction(children) ? children(error) : null\n          : component\n            ? React.createElement(component, rest as any, error)\n            : error\n      : null;\n  }\n}\n\nexport const ErrorMessage = connect<\n  ErrorMessageProps,\n  ErrorMessageProps & { formik: FormikContext<any> }\n>(ErrorMessageImpl);\n","import hoistNonReactStatics from 'hoist-non-react-statics';\nimport * as React from 'react';\nimport { Formik } from './Formik';\nimport {\n  FormikActions,\n  FormikProps,\n  FormikSharedConfig,\n  FormikValues,\n} from './types';\nimport { isFunction } from './utils';\n\n/**\n * State, handlers, and helpers injected as props into the wrapped form component.\n * Used with withFormik()\n *\n * @deprecated  Use `OuterProps & FormikProps<Values>` instead.\n */\nexport type InjectedFormikProps<Props, Values> = Props & FormikProps<Values>;\n\n/**\n * Formik actions + { props }\n */\nexport type FormikBag<P, V> = { props: P } & FormikActions<V>;\n\n/**\n * withFormik() configuration options. Backwards compatible.\n */\nexport interface WithFormikConfig<\n  Props,\n  Values extends FormikValues = FormikValues,\n  DeprecatedPayload = Values\n> extends FormikSharedConfig {\n  /**\n   * Set the display name of the component. Useful for React DevTools.\n   */\n  displayName?: string;\n\n  /**\n   * Submission handler\n   */\n  handleSubmit: (values: Values, formikBag: FormikBag<Props, Values>) => void;\n\n  /**\n   * Map props to the form values\n   */\n  mapPropsToValues?: (props: Props) => Values;\n\n  /**\n   * Map props to the form values\n   */\n  mapPropsToStatus?: (props: Props) => any;\n\n  /**\n   * @deprecated in 0.9.0 (but needed to break TS types)\n   */\n  mapValuesToPayload?: (values: Values) => DeprecatedPayload;\n\n  /**\n   * A Yup Schema or a function that returns a Yup schema\n   */\n  validationSchema?: any | ((props: Props) => any);\n\n  /**\n   * Validation function. Must return an error object or promise that\n   * throws an error object where that object keys map to corresponding value.\n   */\n  validate?: (values: Values, props: Props) => void | object | Promise<any>;\n}\n\nexport type CompositeComponent<P> =\n  | React.ComponentClass<P>\n  | React.StatelessComponent<P>;\n\nexport interface ComponentDecorator<TOwnProps, TMergedProps> {\n  (component: CompositeComponent<TMergedProps>): React.ComponentType<TOwnProps>;\n}\n\nexport interface InferableComponentDecorator<TOwnProps> {\n  <T extends CompositeComponent<TOwnProps>>(component: T): T;\n}\n\n/**\n * A public higher-order component to access the imperative API\n */\nexport function withFormik<\n  OuterProps,\n  Values extends FormikValues,\n  Payload = Values\n>({\n  mapPropsToValues = (vanillaProps: OuterProps): Values => {\n    let val: Values = {} as Values;\n    for (let k in vanillaProps) {\n      if (\n        vanillaProps.hasOwnProperty(k) &&\n        typeof vanillaProps[k] !== 'function'\n      ) {\n        (val as any)[k] = vanillaProps[k];\n      }\n    }\n    return val as Values;\n  },\n  ...config\n}: WithFormikConfig<OuterProps, Values, Payload>): ComponentDecorator<\n  OuterProps,\n  OuterProps & FormikProps<Values>\n> {\n  return function createFormik(\n    Component: CompositeComponent<OuterProps & FormikProps<Values>>\n  ): React.ComponentClass<OuterProps> {\n    const componentDisplayName =\n      Component.displayName ||\n      Component.name ||\n      (Component.constructor && Component.constructor.name) ||\n      'Component';\n    /**\n     * We need to use closures here for to provide the wrapped component's props to\n     * the respective withFormik config methods.\n     */\n    class C extends React.Component<OuterProps, {}> {\n      static displayName = `WithFormik(${componentDisplayName})`;\n\n      validate = (values: Values): void | object | Promise<any> => {\n        return config.validate!(values, this.props);\n      };\n\n      validationSchema = () => {\n        return isFunction(config.validationSchema)\n          ? config.validationSchema!(this.props)\n          : config.validationSchema;\n      };\n\n      handleSubmit = (values: Values, actions: FormikActions<Values>) => {\n        return config.handleSubmit(values, {\n          ...actions,\n          props: this.props,\n        });\n      };\n\n      /**\n       * Just avoiding a render callback for perf here\n       */\n      renderFormComponent = (formikProps: FormikProps<Values>) => {\n        return <Component {...this.props} {...formikProps} />;\n      };\n\n      render() {\n        const { children, ...props } = this.props as any;\n        return (\n          <Formik\n            {...props}\n            {...config}\n            validate={config.validate && this.validate}\n            validationSchema={config.validationSchema && this.validationSchema}\n            initialValues={mapPropsToValues(this.props)}\n            initialStatus={\n              config.mapPropsToStatus && config.mapPropsToStatus(this.props)\n            }\n            onSubmit={this.handleSubmit as any}\n            render={this.renderFormComponent}\n          />\n        );\n      }\n    }\n\n    return hoistNonReactStatics<OuterProps, OuterProps & FormikProps<Values>>(\n      C,\n      Component as React.ComponentClass<OuterProps & FormikProps<Values>> // cast type to ComponentClass (even if SFC)\n    ) as React.ComponentClass<OuterProps>;\n  };\n}\n"],"names":["FormikProvider","FormikConsumer","connect","Comp","C","props","React.createElement","formik","componentDisplayName","displayName","name","constructor","WrappedComponent","hoistNonReactStatics","isFunction","obj","isObject","isInteger","String","Math","floor","Number","isString","Object","prototype","toString","call","isNaN","isEmptyChildren","children","React.Children","count","isPromise","value","then","isInputEvent","target","makeCancelable","promise","hasCanceled","Promise","resolve","reject","val","isCanceled","error","getIn","key","def","p","path","toPath","length","undefined","setIn","res","clone","resVal","i","pathArray","currentPath","currentObj","slice","nextPath","setNestedObjectValues","object","visited","response","WeakMap","_a","keys","_i","k","get","set","Array","isArray","_super","_this","fields","errors","setState","touched","validateOnBlur","runValidations","state","values","validateOnChange","status","isSubmitting","didMount","field","isValidating","runSingleFieldLevelValidation","validate","x","e","validationSchema","schema","validateYupSchema","err","yupToFormErrors","fieldId","validator","prevState","isEqual","hasOwnProperty","reduce","newObj","assign","catch","eventOrPath","executeChange","eventOrValue","maybePath","event_1","persist","type","name_1","checked","test","parsed","parseFloat","path_1","hcCache","shouldValidate","preventDefault","submitForm","validateOnSubmit","submitFormWithValidation","submitFormWithoutValidation","submitCount","executeSubmit","combinedErrors","onSubmit","getFormikActions","executeBlur","maybeEvent","event_3","name_2","path_2","hbCache","event","message","nextValues","postUpdate","initialValues","initialStatus","onReset","maybePromisedOnReset","resetForm","s","callback","validateForm","validateField","setError","setErrors","setFieldError","setFieldTouched","setFieldValue","setStatus","setSubmitting","setTouched","setValues","setFormikState","setAllProperties","isInitialValid","dirty","isValid","getFormikComputedProps","registerField","unregisterField","handleBlur","handleChange","handleReset","handleSubmit","getFormikBag","warning","component","render","tslib_1.__extends","Formik","this","prevProps","enableReinitialize","fieldKeysWithValidation","filter","f","fieldValidations","map","all","fieldErrorsList","prev","curr","index","maybePromisedErrors","ctx","getFormikContext","only","React.Component","yupError","inner","sync","context","validateData","abortEarly","arrayMerge","source","options","destination","forEach","shouldClone","isMergeableObject","deepmerge","indexOf","push","Field","FieldInner","_b","restOfFormik","onChange","onBlur","bag","form","innerRef","rest","ref","Form","move","array","from","to","copy","splice","swap","indexA","indexB","a","insert","replace","FieldArray","fn","alterTouched","alterErrors","updateErrors","updateTouched","updateArrayField","cloneDeep","arr","unshift","remove","pop","bind","FieldArrayInner","result","tmp","arrayHelpers","handlePush","handlePop","handleSwap","handleMove","handleInsert","handleReplace","handleUnshift","handleRemove","FastField","FastFieldInner","shouldUpdate","ErrorMessage","ErrorMessageImpl","touch","doc","document","activeElement","body","mapPropsToValues","config","Component","actions","formikProps","mapPropsToStatus","renderFormComponent"],"mappings":"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"}